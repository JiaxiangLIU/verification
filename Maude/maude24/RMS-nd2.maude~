fmod OPTION-NAT is 
  protecting NAT .
  sort OptionNat .

  op none : -> OptionNat [ctor] .
  op some_ : Nat -> OptionNat [ctor] .

  op s_ : OptionNat -> OptionNat .
  op _+_ : Nat OptionNat -> OptionNat .

  vars n m : Nat .

  eq s none = none .
  eq s some n = some (s n) .

  eq n + none = none .
  eq n + some m = some (n + m) .
endfm

fmod STACK is 
  protecting OPTION-NAT .
  sort Stack .

  op bottom : -> Stack [ctor] .
  op _#_ : Nat Stack -> Stack [ctor] .

  op push_to_ : OptionNat Stack -> Stack .
  op pop : Stack -> Stack .
  op peek : Stack -> OptionNat .
  op depth : Stack -> Nat .

  var n : Nat .
  var s : Stack .
  
  eq push none to s = s .
  eq push some n to s = n # s .
 
  eq pop(bottom) = bottom .
  eq pop(n # s) = s .

  eq peek(bottom) = none .
  eq peek(n # s) = some n .

  eq depth(bottom) = 0 .
  eq depth(n # s) = s (depth(s)) .
endfm

fmod TIMER is 
  protecting NAT .
  sorts Interval Counter .
  sort Timer .

  op [_,_] : NzNat NzNat -> Interval [ctor] .
  op [_/_] : Nat Interval -> Counter [ctor] .
  op [_/_] : Nat NzNat -> Timer [ctor] .
  ops INT-PERIOD CYCLE : -> NzNat .

  op reset : Counter -> Counter .
  op inc : Counter -> Counter .
  op inc : Timer -> Timer .
  op _rem_ : Timer NzNat -> Nat .

  var n : Nat .
  vars m N : NzNat .
  var i : Interval .

  *** reset the counter
  eq reset([ n / i ]) = [ 0 / i ] .

  *** increase the counter
  eq inc([ n / i ]) = [ s n / i ] .

  *** increase the timer
  ceq inc([ n / N ]) = [ 0 / N ] if s n := N .
  eq inc([ n / N ]) = [ s n / N ] [owise] .

  eq [ n / N ] rem m = n rem m .

  eq INT-PERIOD = 5000 .
  eq CYCLE = 27720 .
endfm

fmod PERIOD is 
  protecting TIMER .
  sort Period .

  op period_ : NzNat -> Period [ctor] .

  op _rem_ : Timer Period -> Nat .

  var t : Timer .
  var p : NzNat .

  eq t rem (period p) = t rem p .
endfm

fmod TASK is 
  protecting OPTION-NAT . 
  protecting TIMER .
  protecting PERIOD .
  sorts Status Priority .
  sort Task .
  sort FinishedStatus .

  ops RUNNING INTERRUPT READY DORMANT : -> Status [ctor] .
  op priority_ : Nat -> Priority [ctor] .

  op <_,_,_:_> : Priority Period Status Counter -> Task [ctor] .
  op errorTask : -> Task [ctor] .

  ops YES MAYBE NO : -> FinishedStatus [ctor] .

  op updateStatus_when_ : Task Timer -> Task .
  op start_ : Task -> Task .
  op run_ : Task -> Task .
  op _isFinished? : Counter -> FinishedStatus .
  op _isFinished? : Task -> FinishedStatus .
  op finish_ : Task -> Task .

  vars n min max : Nat .
  var p : Priority .
  var T : Period .
  var st : Status .
  var c : Counter .
  var timer : Timer .
  var t : Task .

  ceq updateStatus < p , T , st : c > when timer
        = if st == DORMANT then < p , T , READY : c >
          else errorTask fi
          if timer rem T == 0 .
  eq updateStatus < p , T , st : c > when timer
       = if st == RUNNING then < p , T , INTERRUPT : c > 
         else < p , T , st : c > fi [owise] .
  eq updateStatus errorTask when timer = errorTask .

  eq start errorTask = errorTask .
  eq start < p , T , st : c > = < p , T , RUNNING : c > .

  eq run errorTask = errorTask .
  eq run < p , T , st : c > = < p , T , st : inc(c) > .

  eq [ max / [ min , max ] ] isFinished? = YES .
  eq [ n / [ min , max ] ] isFinished? 
       = if n < min then NO else MAYBE fi [owise] .

  eq < p , T , st : [ max / [ min , max ] ] > isFinished? = YES .
  eq < p , T , st : [ n / [ min , max ] ] > isFinished? 
       = if n < min then NO else MAYBE fi [owise] .

  eq finish errorTask = errorTask .
  eq finish < p , T , st : c > = < p , T , DORMANT : reset(c) > .

endfm

fmod TASKLIST is 
  protecting TASK .
  sort TaskList .

  op null : -> TaskList [ctor] .
  op _::_ : Task TaskList -> TaskList [ctor] .

  op updateStatus_when_ : TaskList Timer -> TaskList .
  op nextTaskIn_from_ : TaskList Nat -> OptionNat .
  op statusOf_in_ : Nat TaskList -> Status .
  op start_in_ : Nat TaskList -> TaskList .
  op run_in_ : Nat TaskList -> TaskList .
  op _isFinished?in_ : Nat TaskList -> FinishedStatus .
  op finish_in_ : Nat TaskList -> TaskList .

  op hasError : TaskList -> Bool .

  ops EXAM-1 EXAM-2 : -> TaskList .

  var n : Nat .
  var t : Task .
  var l : TaskList .
  var p : Priority .
  var T : Period .
  var st : Status .
  var c : Counter .
  var timer : Timer .

  eq updateStatus null when timer = null .
  eq updateStatus t :: l when timer
       = (updateStatus t when timer) :: (updateStatus l when timer) .

  eq nextTaskIn null from n = none .
  eq nextTaskIn t :: l from s n = s (nextTaskIn l from n) .
  eq nextTaskIn < p , T , st : c > :: l from 0 
       = if st == READY or st == INTERRUPT 
         then some 0
         else s (nextTaskIn l from 0)
         fi .
  eq nextTaskIn errorTask :: l from 0 = none .

  *** assume that the inputs are well-formed
  eq statusOf 0 in < p , T , st : c > :: l = st .
  eq statusOf s n in t :: l = statusOf n in l .

  eq start n in null = null .
  eq start (s n) in (t :: l) = t :: (start n in l) .
  eq start 0 in (t :: l) = (start t) :: l .

  eq run n in null = null .
  eq run (s n) in (t :: l) = t :: (run n in l) .
  eq run 0 in (t :: l) = (run t) :: l .

  eq n isFinished?in null = NO .
  eq (s n) isFinished?in (t :: l) = n isFinished?in l .
  eq 0 isFinished?in (t :: l) = t isFinished? .

  eq finish n in null = null .
  eq finish (s n) in (t :: l) = t :: (finish n in l) .
  eq finish 0 in (t :: l) = (finish t) :: l .

  eq hasError(null) = false .
  eq hasError(errorTask :: l) = true .
  eq hasError(t :: l) = hasError(l) [owise] .

  eq EXAM-1 = errorTask 
              :: < priority 5 , period 16 , RUNNING : [ 2 / [ 3 , 5 ] ] >
              :: < priority 4 , period 8 , INTERRUPT : [ 2 / [ 3 , 5 ] ] > 
              :: < priority 3 , period 4 , READY : [ 2 / [ 3 , 5] ] >
              :: < priority 2 , period 2 , DORMANT : [ 2 / [ 3 , 5 ] ] > 
              :: null .

  eq EXAM-2 = < priority 5 , period 20 , RUNNING : [ 2 / [ 3 , 5 ] ] > 
              :: < priority 4 , period 15 , INTERRUPT : [ 2 / [ 3 , 5 ] ] > 
              :: < priority 3 , period 10 , READY : [ 2 / [ 3 , 5 ] ] >
              :: < priority 2 , period 5 , DORMANT : [ 2 / [ 3 , 5 ] ] > 
              :: null .

endfm

fmod SYSTEM is 
  protecting TASKLIST .
  protecting STACK .
  protecting TIMER .
  sort ThreadID .
  subsort OptionNat < ThreadID .
  sorts RunTag SysTag IntSwitchTag IntReqTag .
  sort System .

  ops sch swi : -> ThreadID [ctor] .
  op running_ : ThreadID -> RunTag [ctor] .
  ops EX IN1 IN2 : -> SysTag [ctor] .
  ops INT-ON INT-OFF : -> IntSwitchTag [ctor] .
  op intReq_ : Bool -> IntReqTag [ctor] .
  op {_;_;_:_:_|_:_|_,_;_|_} : 
     TaskList Stack RunTag Timer Timer IntSwitchTag IntReqTag 
     Counter Counter OptionNat SysTag -> System [ctor] .

  op _.reqInterrupt : System -> System .
  op _.interrupt : System -> System .
  op _.int-ret : System -> System . 
  op ansInt(_,_) : IntSwitchTag IntReqTag -> Bool .

  var tasks : TaskList .
  var s : Stack .
  var r : ThreadID .
  vars timer time : Timer .
  var isTag : IntSwitchTag .
  var irTag : IntReqTag .
  vars schCtr swiCtr : Counter .
  var tmp : OptionNat .
  var sTag : SysTag .

  *** this is to request an interrupt
  eq { tasks ; s ; running r : timer : time 
       | isTag : irTag | schCtr , swiCtr ; tmp | sTag }.reqInterrupt
       = { tasks ; s ; running r : timer : time 
           | isTag : intReq true | schCtr , swiCtr ; tmp | IN1 } .

  *** this is to answer the interrupt request
  eq { tasks ; s ; running r : timer : time 
       | INT-ON : intReq true | schCtr , swiCtr ; tmp | sTag }.interrupt
       = { tasks ; push r to s ; running sch : timer : time 
           | INT-OFF : intReq false | schCtr , swiCtr ; tmp | sTag } .

  eq { tasks ; s ; running r : timer : time 
       | INT-OFF : irTag | schCtr , swiCtr ; tmp | sTag }.int-ret
       = { tasks ; pop(s) ; running peek(s) : timer : time 
           | INT-ON : irTag | schCtr , swiCtr ; tmp | sTag } .

  eq ansInt( INT-ON , intReq true ) = true .
  eq ansInt( isTag , irTag ) = false [owise] .
endfm

mod SCHEDULE is 
  protecting SYSTEM .

  op _.updateStatus : System -> System .
  op _.scanTasks : System -> System .
  op _.bgnSchedule : System -> System .
  op _.endSchedule : System -> System .
  op _.progress : System -> System .
  op _.bgnSwitch : System -> System .
  op _.endSwitch : System -> System .
  op _.reload : System -> System .

  var tasks : TaskList .
  var s : Stack .
  var r : ThreadID .
  vars m n : Nat .
  var timer : Timer .
  var time : Timer .
  var isTag : IntSwitchTag .
  var irTag : IntReqTag .
  vars schCtr swiCtr : Counter .
  var tmp : OptionNat .
  var sTag : SysTag .
  var sys : System .

  *** update the status of the tasklist in the system
  eq { tasks ; s ; running r : timer : time 
       | isTag : irTag | schCtr , swiCtr ; tmp | sTag }.updateStatus
       = { (updateStatus tasks when timer ) ; s ; running r 
           : inc(timer) : time | isTag : irTag | schCtr , swiCtr ; tmp | sTag } .

  *** scan the tasklist to find the first task, whose status is READY or INTERRUPT
  *** - if READY, set the status to be RUNNING and put it to run
  *** - if INTERRUPT, do the "return"
  ceq { tasks ; s ; running r : timer : time 
        | isTag : irTag | schCtr , swiCtr ; tmp | sTag }.scanTasks
        = if statusOf n in tasks == READY 
          then { (start n in tasks) ; s ; running some n : timer : time 
                 | INT-ON : irTag | schCtr , swiCtr ; tmp | sTag }
          else { tasks ; s ; running r : timer : time 
                 | isTag : irTag | schCtr , swiCtr ; tmp | sTag }.int-ret
          *** status of n is INTERRUPT
          fi
          if some n := nextTaskIn tasks from 0 .
  eq { tasks ; s ; running r : timer : time 
       | isTag : irTag | schCtr , swiCtr ; tmp | sTag }.scanTasks
       = { tasks ; s ; running none : timer : time 
           | INT-ON : irTag | schCtr , swiCtr ; tmp | sTag } [owise] . 
         *** if none := nextTaskIn tasks from 0 .

  *** the schedule function corresponding to the function in the src
  eq (sys).bgnSchedule = (sys).updateStatus .
  eq { tasks ; s ; running sch : timer : time 
       | isTag : irTag | schCtr , swiCtr ; tmp | sTag }.endSchedule
       = { tasks ; s ; running sch : timer : time 
           | isTag : irTag | reset(schCtr) , swiCtr ; tmp | EX }.scanTasks .

  *** the whole system progresses 1 tick, advancing the state to IN2
  eq { tasks ; s ; running none : timer : time 
       | isTag : irTag | schCtr , swiCtr ; tmp | sTag }.progress
       = { tasks ; s ; running none : timer : inc(time) 
           | isTag : irTag | schCtr , swiCtr ; tmp | IN2 } .
  eq { tasks ; s ; running some n : timer : time 
       | isTag : irTag | schCtr , swiCtr ; tmp | sTag }.progress
       = { (run n in tasks) ; s ; running some n : timer : inc(time) 
           | isTag : irTag | schCtr , swiCtr ; tmp | IN2 } .
  eq { tasks ; s ; running sch : timer : time 
       | isTag : irTag | schCtr , swiCtr ; tmp | sTag }.progress
       = { tasks ; s ; running sch : timer : inc(time) 
           | isTag : irTag | inc(schCtr) , swiCtr ; tmp | IN2 } .
  eq { tasks ; s ; running swi : timer : time 
       | isTag : irTag | schCtr , swiCtr ; tmp | sTag }.progress
       = { tasks ; s ; running swi : timer : inc(time) 
           | isTag : irTag | schCtr , inc(swiCtr) ; tmp | IN2 } .
  

  *** to start the switching, store the current finished task ID
  eq { tasks ; s ; running some n : timer : time 
       | isTag : irTag | schCtr , swiCtr ; tmp | sTag }.bgnSwitch
       = { tasks ; s ; running swi : timer : time
           | INT-OFF : irTag | schCtr , swiCtr ; some n | EX } . 

  *** to end the switching, set the next task which should be run
  ceq { tasks ; s ; running swi : timer : time 
        | INT-OFF : irTag | schCtr , swiCtr ; some n | sTag }.endSwitch
        = if statusOf m in tasks == READY 
          then { (start m in tasks) ; s ; running some m : timer : time 
                 | INT-ON : irTag | schCtr , reset(swiCtr) ; none | EX }
          else { tasks ; s ; running swi : timer : time 
                 | INT-OFF : irTag | schCtr , reset(swiCtr) ; none | EX }.int-ret
          *** status of m is INTERRUPT
          fi
          if some m := nextTaskIn tasks from (s n) .
  eq { tasks ; s ; running swi : timer : time 
       | INT-OFF : irTag | schCtr , swiCtr ; some n | sTag }.endSwitch
       = { tasks ; s ; running none : timer : time 
           | INT-ON : irTag | schCtr , reset(swiCtr) ; none | EX } [owise] . 
         *** if none := nextTaskIn tasks from (s n) .


  crl [req-interrupt] :
    { tasks ; s ; running r : timer : time 
      | isTag : irTag | schCtr , swiCtr ; tmp | EX } 
    => { tasks ; s ; running r : timer : time 
         | isTag : irTag | schCtr , swiCtr ; tmp | EX }.reqInterrupt
    if time rem INT-PERIOD == 0 .

  crl [nreq-interrupt] :
    { tasks ; s ; running r : timer : time 
      | isTag : irTag | schCtr , swiCtr ; tmp | EX } 
    => { tasks ; s ; running r : timer : time 
         | isTag : irTag | schCtr , swiCtr ; tmp | IN1 }
    if time rem INT-PERIOD =/= 0 .

  crl [ans-interrupt] : 
    { tasks ; s ; running r : timer : time 
      | isTag : irTag | schCtr , swiCtr ; tmp | IN1 } 
    => (({ tasks ; s ; running r : timer : time | isTag : irTag 
           | schCtr , swiCtr ; tmp | IN1 }.interrupt).bgnSchedule).progress
    if ansInt( isTag , irTag ) == true .

  crl [nans-interrupt] : 
    { tasks ; s ; running r : timer : time 
      | isTag : irTag | schCtr , swiCtr ; tmp | IN1 } 
    => { tasks ; s ; running r : timer : time | isTag : irTag 
         | schCtr , swiCtr ; tmp | IN1 }.progress
    if ansInt( isTag , irTag ) == false .

  rl [reload-none] :
    { tasks ; s ; running none : timer : time 
      | isTag : irTag | schCtr , swiCtr ; tmp | IN2 } 
    => { tasks ; s ; running none : timer : time 
         | isTag : irTag | schCtr , swiCtr ; tmp | EX } .

  crl [task-finish-yes] :
    { tasks ; s ; running some n : timer : time 
      | isTag : irTag | schCtr , swiCtr ; tmp | IN2 }
    => { (finish n in tasks) ; s ; running some n : timer : time 
         | isTag : irTag | schCtr , swiCtr ; tmp | EX }.bgnSwitch
    if (n isFinished?in tasks == YES) .

  crl [task-finish-no] :
    { tasks ; s ; running some n : timer : time 
      | isTag : irTag | schCtr , swiCtr ; tmp | IN2 }
    => { tasks ; s ; running some n : timer : time 
         | isTag : irTag | schCtr , swiCtr ; tmp | EX } 
    if (n isFinished?in tasks == NO) .

  crl [task-finish-maybe-yes] : 
    { tasks ; s ; running some n : timer : time 
      | isTag : irTag | schCtr , swiCtr ; tmp | IN2 }
    => { (finish n in tasks) ; s ; running some n : timer : time 
         | isTag : irTag | schCtr , swiCtr ; tmp | EX }.bgnSwitch
    if (n isFinished?in tasks == MAYBE) .

  crl [task-finish-maybe-no] :
    { tasks ; s ; running some n : timer : time 
      | isTag : irTag | schCtr , swiCtr ; tmp | IN2 }
    => { tasks ; s ; running some n : timer : time 
         | isTag : irTag | schCtr , swiCtr ; tmp | EX } 
    if (n isFinished?in tasks == MAYBE) .

  crl [switch-finish-yes] :
    { tasks ; s ; running swi : timer : time 
      | isTag : irTag | schCtr , swiCtr ; tmp | IN2 }
    => { tasks ; s ; running swi : timer : time 
         | isTag : irTag | schCtr , swiCtr ; tmp | IN2 }.endSwitch
    if (swiCtr isFinished? == YES) .

  crl [switch-finish-no] :
    { tasks ; s ; running swi : timer : time 
      | isTag : irTag | schCtr , swiCtr ; tmp | IN2 }
    => { tasks ; s ; running swi : timer : time 
         | isTag : irTag | schCtr , swiCtr ; tmp | EX } 
    if (swiCtr isFinished? == NO) .

  crl [switch-finish-maybe-yes] : 
    { tasks ; s ; running swi : timer : time 
      | isTag : irTag | schCtr , swiCtr ; tmp | IN2 }
    => { tasks ; s ; running swi : timer : time 
         | isTag : irTag | schCtr , swiCtr ; tmp | IN2 }.endSwitch
    if (swiCtr isFinished? == MAYBE) .

  crl [switch-finish-maybe-no] :
    { tasks ; s ; running swi : timer : time 
      | isTag : irTag | schCtr , swiCtr ; tmp | IN2 }
    => { tasks ; s ; running swi : timer : time 
         | isTag : irTag | schCtr , swiCtr ; tmp | EX } 
    if (swiCtr isFinished? == MAYBE) .

  crl [schedule-finish-yes] :
    { tasks ; s ; running sch : timer : time 
      | isTag : irTag | schCtr , swiCtr ; tmp | IN2 }
    => { tasks ; s ; running sch : timer : time 
         | isTag : irTag | schCtr , swiCtr ; tmp | IN2 }.endSchedule
    if (schCtr isFinished? == YES) .

  crl [schedule-finish-no] :
    { tasks ; s ; running sch : timer : time 
      | isTag : irTag | schCtr , swiCtr ; tmp | IN2 }
    => { tasks ; s ; running sch : timer : time 
         | isTag : irTag | schCtr , swiCtr ; tmp | EX } 
    if (schCtr isFinished? == NO) .

  crl [schedule-finish-maybe-yes] : 
    { tasks ; s ; running sch : timer : time 
      | isTag : irTag | schCtr , swiCtr ; tmp | IN2 }
    => { tasks ; s ; running sch : timer : time 
         | isTag : irTag | schCtr , swiCtr ; tmp | IN2 }.endSchedule
    if (schCtr isFinished? == MAYBE) .

  crl [schedule-finish-maybe-no] :
    { tasks ; s ; running sch : timer : time 
      | isTag : irTag | schCtr , swiCtr ; tmp | IN2 }
    => { tasks ; s ; running sch : timer : time 
         | isTag : irTag | schCtr , swiCtr ; tmp | EX } 
    if (schCtr isFinished? == MAYBE) .

endm

mod SCHEDULE-TEST is 
  protecting SCHEDULE .
 
  ops TEST-1 TEST-2 TEST-3 TEST-4 : -> TaskList .
  ops INIT-1 INIT-2 INIT-3 INIT-4 : -> System .
  ops TASK-614-1 TASK-614-2 TASK-614-3 TASK-614-4 : -> TaskList .
  ops INIT-614-1 INIT-614-2 INIT-614-3 INIT-614-4 : -> System .
  ops TEST-5 TEST-6 : -> TaskList .
  ops INIT-5 INIT-6 : -> System .

  *** utilization = 71.6%
  eq TEST-1 = < priority 8 , period 2 , DORMANT : [ 0 / [ 100 , 100 ] ] >
            :: < priority 7 , period 4 , DORMANT : [ 0 / [ 300 , 300 ] ] >
            :: < priority 6 , period 7 , DORMANT : [ 0 / [ 300 , 300 ] ] >
            :: < priority 5 , period 11 , DORMANT : [ 0 / [ 400 , 400 ] ] >
            :: < priority 4 , period 14 , DORMANT : [ 0 / [ 500 , 500 ] ] >
            :: < priority 3 , period 18 , DORMANT : [ 0 / [ 800 , 800 ] ] >
            :: < priority 2 , period 22 , DORMANT : [ 0 / [ 700 , 700 ] ] >
            :: < priority 1 , period 24 , DORMANT : [ 0 / [ 1000 , 1000 ] ] >
            :: null .

  eq TEST-2 = < priority 8 , period 2 , DORMANT : [ 0 / [ 1 , 1 ] ] >
            :: < priority 7 , period 4 , DORMANT : [ 0 / [ 3 , 3 ] ] >
            :: < priority 6 , period 7 , DORMANT : [ 0 / [ 3 , 3 ] ] >
            :: < priority 5 , period 11 , DORMANT : [ 0 / [ 4 , 4 ] ] >
            :: < priority 4 , period 14 , DORMANT : [ 0 / [ 5 , 5 ] ] >
            :: < priority 3 , period 18 , DORMANT : [ 0 / [ 8 , 8 ] ] >
            :: < priority 2 , period 22 , DORMANT : [ 0 / [ 7 , 7 ] ] >
            :: < priority 1 , period 24 , DORMANT : [ 0 / [ 60 , 60 ] ] >
            :: null .

  eq TEST-3 = < priority 8 , period 2 , DORMANT : [ 0 / [ 50 , 100 ] ] >
            :: < priority 7 , period 4 , DORMANT : [ 0 / [ 200 , 250 ] ] >
            :: < priority 6 , period 7 , DORMANT : [ 0 / [ 200 , 300 ] ] >
            :: < priority 5 , period 11 , DORMANT : [ 0 / [ 300 , 400 ] ] >
            :: < priority 4 , period 14 , DORMANT : [ 0 / [ 200 , 400 ] ] >
            :: < priority 3 , period 18 , DORMANT : [ 0 / [ 500 , 700 ] ] >
            :: < priority 2 , period 22 , DORMANT : [ 0 / [ 400 , 600 ] ] >
            :: < priority 1 , period 24 , DORMANT : [ 0 / [ 600 , 750 ] ] >
            :: null .

  eq TEST-4 = < priority 8 , period 2 , DORMANT : [ 0 / [ 1 , 2 ] ] >
            :: < priority 7 , period 4 , DORMANT : [ 0 / [ 2 , 3 ] ] >
            :: < priority 6 , period 7 , DORMANT : [ 0 / [ 2 , 4 ] ] >
            :: < priority 5 , period 11 , DORMANT : [ 0 / [ 3 , 4 ] ] >
            :: < priority 4 , period 14 , DORMANT : [ 0 / [ 2 , 5 ] ] >
            :: < priority 3 , period 18 , DORMANT : [ 0 / [ 5 , 8 ] ] >
            :: < priority 2 , period 22 , DORMANT : [ 0 / [ 4 , 7 ] ] >
            :: < priority 1 , period 24 , DORMANT : [ 0 / [ 10 , 60 ] ] >
            :: null .

  eq TEST-5 = < priority 1 , period 1 , DORMANT : [ 0 / [ 1 , 6 ] ] >
            :: null .

  eq TEST-6 = < priority 2 , period 1 , DORMANT : [ 0 / [ 1 , 3 ] ] >
              :: < priority 1 , period 2 , DORMANT : [ 0 / [ 2 , 5 ] ] >
              :: null .

  eq TASK-614-1 = < priority 2 , period 1 , DORMANT : [ 0 / [ 3000 , 3000 ] ] >
                  :: < priority 1 , period 5 , DORMANT : [ 0 / [ 7000 , 7000 ] ] >
                  :: null .

  eq TASK-614-2 = < priority 2 , period 1 , DORMANT : [ 0 / [ 2000 , 2000 ] ] >
                  :: < priority 1 , period 5 , DORMANT : [ 0 / [ 4000 , 4000 ] ] >
                  :: null .

  eq TASK-614-3 = < priority 2 , period 1 , DORMANT : [ 0 / [ 2000 , 2000 ] ] >
                  :: < priority 1 , period 5 , DORMANT : [ 0 / [ 2300 , 2300 ] ] >
                  :: null .

  eq TASK-614-4 = < priority 2 , period 1 , DORMANT : [ 0 / [ 2500 , 3000 ] ] >
                  :: < priority 1 , period 5 , DORMANT : [ 0 / [ 7000 , 7000 ] ] >
                  :: null .

  eq INIT-1 = { TEST-1 ; bottom ; running none : [ 0 / CYCLE ] : [ 0 / 13860000 ] 
                | INT-ON : intReq false 
                | [ 0 / [ 3 , 4 ] ] , [ 0 / [ 1 , 2 ] ] ; none | EX } .
  eq INIT-2 = { TEST-2 ; bottom ; running none : [ 0 / CYCLE ] : [ 0 / CYCLE ]
                | INT-ON : intReq false 
                | [ 0 / [ 1 , 1 ] ] , [ 0 / [ 1 , 1 ] ] ; none | EX } .
  eq INIT-3 = { TEST-3 ; bottom ; running none : [ 0 / CYCLE ] : [ 0 / 13860000 ]
                | INT-ON : intReq false 
                | [ 0 / [ 3 , 4 ] ] , [ 0 / [ 1 , 2 ] ] ; none | EX } .
  eq INIT-4 = { TEST-4 ; bottom ; running none : [ 0 / CYCLE ] : [ 0 / CYCLE ]
                | INT-ON : intReq false 
                | [ 0 / [ 1 , 1 ] ] , [ 0 / [ 1 , 1 ] ] ; none | EX } .
  eq INIT-5 = { TEST-5 ; bottom ; running none : [ 0 / 2 ] : [ 0 / 10 ]
                | INT-ON : intReq false 
                | [ 0 / [ 1 , 1 ] ] , [ 0 / [ 1 , 1 ] ] ; none | EX } .
  eq INIT-6 = { TEST-6 ; bottom ; running none : [ 0 / 2 ] : [ 0 / 10 ]
                | INT-ON : intReq false 
                | [ 0 / [ 1 , 1 ] ] , [ 0 / [ 1 , 1 ] ] ; none | EX } .
  eq INIT-614-1 = { TASK-614-1 ; bottom ; running none : [ 0 / 5 ] : [ 0 / 5000 ]
                    | INT-ON : intReq false 
                    | [ 0 / [ 5 , 5 ] ] , [ 0 / [ 2 , 2 ] ] ; none | EX } .
  eq INIT-614-2 = { TASK-614-2 ; bottom ; running none : [ 0 / 5 ] : [ 0 / 5000 ]
                    | INT-ON : intReq false 
                    | [ 0 / [ 5 , 5 ] ] , [ 0 / [ 2 , 2 ] ] ; none | EX } .
  eq INIT-614-3 = { TASK-614-3 ; bottom ; running none : [ 0 / 5 ] : [ 0 / 25000 ]
                    | INT-ON : intReq false 
                    | [ 0 / [ 5 , 9 ] ] , [ 0 / [ 2 , 4 ] ] ; none | EX } .
  eq INIT-614-4 = { TASK-614-4 ; bottom ; running none : [ 0 / 5 ] : [ 0 / 5000 ]
                    | INT-ON : intReq false 
                    | [ 0 / [ 2 , 2 ] ] , [ 0 / [ 1 , 1 ] ] ; none | EX } .
endm

mod SCHEDULE-VERIFICATION is 
  protecting SCHEDULE .
  protecting SCHEDULE-TEST .

  op stackOverflow : System -> Bool .
  op taskTimeout : System -> Bool .
  op schedulingError : OptionNat TaskList -> Bool .

  op schedulingError : System -> Bool .
 
  var tl : TaskList .
  var s : Stack .
  var r : ThreadID .
  var timer : Timer .
  var time : Timer .
  var p : Priority .
  var T : Period .
  var c : Counter .
  var t : Task .
  var n : Nat .
  var isTag : IntSwitchTag .
  var irTag : IntReqTag .
  vars schCtr swiCtr : Counter .
  var tmp : OptionNat .
  var sTag : SysTag .

  eq stackOverflow({ tl ; s ; running r : timer : time 
                     | isTag : irTag | schCtr , swiCtr ; tmp | EX }) 
       = depth(s) > 8 .

  eq taskTimeout({ tl ; s ; running r : timer : time 
                   | isTag : irTag | schCtr , swiCtr ; tmp | EX }) 
       = hasError(tl) .

  eq schedulingError(none , null) = false .
  eq schedulingError(none , (< p , T , DORMANT : c > :: tl)) 
       = schedulingError(none , tl) .
  eq schedulingError(none , t :: tl) = true [owise] .
  eq schedulingError(some 0 , t :: tl) = false .
  eq schedulingError(some (s n) , (< p , T , DORMANT : c > :: tl))
       = schedulingError(some n , tl) .
  eq schedulingError(some (s n) , t :: tl) = true [owise] .
  eq schedulingError(sch , tl ) = false .
  eq schedulingError(swi , tl ) = false .

  *** This assumes no timeout in the system .
  eq schedulingError({ tl ; s ; running r : timer : time 
                       | isTag : irTag | schCtr , swiCtr ; tmp | EX }) 
       = schedulingError(r , tl) .
endm

mod SCHEDULE-MODELCHECK is
  protecting SCHEDULE-VERIFICATION .
  including SATISFACTION .
  including MODEL-CHECKER .
  including LTL-SIMPLIFIER .
  subsort System < State .

  op timeout : -> Prop [ctor] .

  var sys : System .
  
  ceq sys |= timeout = true if taskTimeout(sys) == true .
  eq sys |= timeout = false [owise] .


  op a : -> System .
  op f_ : System -> System .
  ops A B C : -> System .

  rl [t1] : a => f a .

  rl [t2] : A => B .
  rl [t3] : B => C .
  rl [t4] : C => A .

  ops mo no : -> Prop .

  eq f a |= mo = true .
  eq sys |= mo = false [owise] .

  eq B |= no = true .
  eq sys |= no = false [owise] .
endm

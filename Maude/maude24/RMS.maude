(fmod MAYBE-NAT is 
  protecting NAT .
  
  sort MaybeNat .
  op none : -> MaybeNat [ctor] .
  op some_ : Nat -> MaybeNat [ctor] .

  vars n m : Nat .

  op s_ : MaybeNat -> MaybeNat .
  eq s none = none .
  eq s some n = some (s n) .

  op _+_ : Nat MaybeNat -> MaybeNat .
  eq n + none = none .
  eq n + some m = some (n + m) .
endfm)

(fmod STACK is 
  protecting MAYBE-NAT .

  sort Stack .
  op bottom : -> Stack [ctor] .
  op _#_ : Nat Stack -> Stack [ctor] .

  var n : Nat .
  var s : Stack .

  op push_to_ : MaybeNat Stack -> Stack .
  eq push none to s = s .
  eq push some n to s = n # s .

  op pop : Stack -> Stack .
  eq pop(bottom) = bottom .
  eq pop(n # s) = s .

  op peek : Stack -> MaybeNat .
  eq peek(bottom) = none .
  eq peek(n # s) = some n .

  op depth : Stack -> Nat .
  eq depth(bottom) = 0 .
  eq depth(n # s) = s (depth(s)) .
endfm)

(tmod COUNTER is
  protecting NAT .
  
  sorts Interval Counter .
  op `[_`,_`] : Time Time -> Interval [ctor] .
  op `[_/_`] : Time Interval -> Counter [ctor] .

  var n : Nat .
  vars m N : NzNat .
  var i : Interval .
  var R R' R'' : Time .

  *** reset the counter
  op reset : Counter -> Counter .
  eq reset([ R / i ]) = [ zero / i ] .

  *** counter may reach the finishing time ?
  op _mayFinish? : Counter -> Bool .
  eq [ R / [ R' , R'' ] ] mayFinish? 
       = if R lt R' then false else true fi .

  op mteOf : Counter -> Time .
  eq mteOf([ R / [ R' , R'' ]]) = R'' monus R .

  op delta_in_ : Counter Time -> Counter .
  eq delta [ R / i ] in R'' = [ R plus R'' / i ] .
endtm)

(fmod TIMER is
  protecting NAT .
  sort Timer .
  op `[_/_`] : Nat NzNat -> Timer [ctor] .

  var n : Nat .
  vars m N : NzNat .

  *** increase the timer
  op inc : Timer -> Timer .
  ceq inc([ n / N ]) = [ 0 / N ] if s n := N .
  eq inc([ n / N ]) = [ s n / N ] [owise] .

  op _rem_ : Timer NzNat -> Nat .
  eq [ n / N ] rem m = n rem m .
endfm)

(tomod INTERRUPT-SOURCE is
  protecting NAT .

  *** the source of interrupts
  class IntSrc | val : Time , cycle : Time .

  var O : Oid .
  var R R' R'' : Time .
  
  op mteOf : Object ~> Time .
  eq mteOf(< O : IntSrc | val : R , cycle : R' >) = R .

  op delta_in_ : Object Time ~> Object [frozen (1)] .
  eq delta < O : IntSrc | val : R , cycle : R' > in R''
       = < O : IntSrc | val : R monus R'' , cycle : R' > .
endtom)

(tomod TASK is
  protecting COUNTER .
  class Task | cnt : Counter .

  *** an error status for tasks 
  op error : -> Object [ctor] .
  
  var O : Oid .
  var C : Counter .
  var R : Time .
  
  op _mayFinish? : Object ~> Bool .
  eq < O : Task | cnt : C > mayFinish? = C mayFinish? .

  op mteOf : Object ~> Time .
  eq mteOf(error) = zero .
  eq mteOf(< O : Task | cnt : C >) = mteOf(C) .

  op delta_in_ : Object Time ~> Object [frozen (1)] .
  eq delta error in R = error .
  eq delta < O : Task | cnt : C > in R = < O : Task | cnt : (delta C in R) > .
endtom)

(omod PERIODIC-TASK is
  protecting TASK .
  protecting TIMER .
  sort Status .
  ops RUNNING INTERRUPT READY DORMANT : -> Status [ctor] .

  class PTask | priority : Nat , period : NzNat , status : Status .
  subclass PTask < Task .

  var O : Oid .
  var T : Nat . 
  var ST : Status .
  var C : Counter .
  var timer : Timer .

  op updateStatus_with_ : Object Timer ~> Object .
  ceq updateStatus < O : PTask | period : T , status : ST > with timer
        = if ST == DORMANT then < O : PTask | status : READY >
          else error fi
          if timer rem T == 0 .
  eq updateStatus < O : PTask | status : ST > with timer
       = if ST == RUNNING then < O : PTask | status : INTERRUPT >
         else < O : PTask | > fi [owise] .
  eq updateStatus error with timer = error .

  op start_ : Object ~> Object .
  eq start error = error .
  eq start < O : PTask | > = < O : PTask | status : RUNNING > .

  op finish_ : Object ~> Object .
  eq finish error = error .
  eq finish < O : PTask | cnt : C >
       = < O : PTask | status : DORMANT , cnt : reset(C) > .
endom)

(omod TASKLIST is
  protecting MAYBE-NAT .
  protecting PERIODIC-TASK .
  protecting TIME-INF .
  sort TaskList .

  *** List of periodic tasks
  op null : -> TaskList [ctor] .
  op _::_ : Object TaskList ~> TaskList [ctor] .
  mb (< O:Oid : PTask | > :: L:TaskList) : TaskList .
  mb (error :: L:TaskList) : TaskList .

  var n : Nat .
  var t : Object .
  var ST : Status .
  var l : TaskList .
  var timer : Timer .
  var R : Time .

  *** the model of function updateStatus() in the code
  op updateStatus_with_ : TaskList Timer -> TaskList .
  eq updateStatus null with timer = null .
  eq updateStatus t :: l with timer
       = (updateStatus t with timer) :: (updateStatus l with timer) .

  *** find the next task which should be run, from index n
  op nextTaskIn_from_ : TaskList Nat -> MaybeNat .
  eq nextTaskIn null from n = none .
  eq nextTaskIn t :: l from s n = s (nextTaskIn l from n) .
  eq nextTaskIn < O:Oid : PTask | status : ST > :: l from 0 
       = if ST == READY or ST == INTERRUPT 
         then some 0
         else s (nextTaskIn l from 0)
         fi .
  eq nextTaskIn error :: l from 0 = none .

  *** get the status of nth task in l
  op statusOf_in_ : Nat TaskList ~> Status .
  eq statusOf 0 in < O:Oid : PTask | status : ST > :: l = ST .
  eq statusOf s n in t :: l = statusOf n in l .

  *** start nth task in l
  op start_in_ : Nat TaskList ~> TaskList .
  --- eq start n in null = null .
  eq start (s n) in (t :: l) = t :: (start n in l) .
  eq start 0 in (t :: l) = (start t) :: l .

  *** ask whether nth task in l may finish
  op _mayFinish?in_ : Nat TaskList ~> Bool .
  --- eq n mayFinish?in null = false .
  eq (s n) mayFinish?in (t :: l) = n mayFinish?in l .
  eq 0 mayFinish?in (t :: l) = t mayFinish? .

  *** finish nth task in l
  op finish_in_ : Nat TaskList ~> TaskList .
  --- eq finish n in null = null .
  eq finish (s n) in (t :: l) = t :: (finish n in l) .
  eq finish 0 in (t :: l) = (finish t) :: l .

  *** l contains error?
  op containError : TaskList -> Bool .
  eq containError(null) = false .
  eq containError(error :: l) = true .
  eq containError(t :: l) = containError(l) [owise] .

  *** mte of the list l
  op mteOf_in_ : MaybeNat TaskList ~> TimeInf .
  --- eq mteOf n in null = zero .
  eq mteOf none in l = INF .
  eq mteOf some 0 in t :: l = mteOf(t) .
  eq mteOf some (s n) in t :: l = mteOf some n in l .

  *** time effect on list l
  op delta__in_ : MaybeNat TaskList Time ~> TaskList .
  eq delta none l in R = l .
  --- eq delta( n , null , R ) = null .
  eq delta (some 0) (t :: l) in R = (delta t in R) :: l .
  eq delta (some (s n)) (t :: l) in R = t :: (delta (some n) l in R) .
endom)

(omod SYSTEM-TASKS is
  protecting TASK .
  protecting MAYBE-NAT .
  sort SysTasks .
  op `[_`] : ObjectConfiguration -> SysTasks [ctor] .

  sort TaskID .
  subsorts MaybeNat Oid < TaskID .

  ops scheduling switching : -> Oid [ctor] .

  *** ask whether task with ID may finish
  op _mayFinish?in_ : Oid SysTasks ~> Bool .
  eq O:Oid mayFinish?in [ < O:Oid : Task | cnt : C:Counter > REST:Configuration ]
       = (C:Counter) mayFinish? .

  *** finish the task with ID
  op finish_in_ : Oid SysTasks ~> SysTasks .
  eq finish O:Oid in [ < O:Oid : Task | cnt : C:Counter > REST:Configuration ]
       = [ < O:Oid : Task | cnt : reset(C:Counter) > REST:Configuration ] .

  *** mte
  op mteOf_in_ : Oid SysTasks ~> Time .
  eq mteOf O:Oid in [ < O:Oid : Task | cnt : C:Counter > REST:Configuration ]
       = mteOf(C:Counter) .

  *** delta
  op delta__in_ : Oid SysTasks Time ~> SysTasks .
  eq delta O:Oid ([ < O:Oid : Task | > REST:Configuration ]) in R:Time
       = [ (delta (< O:Oid : Task | >) in R:Time) REST:Configuration ] .

endom)

(omod REGISTER is
  protecting SYSTEM-TASKS .
  class Regs | pc : TaskID , mask : Bool ,
               ir : Bool , temp : TaskID .

  var O : Oid .
  var B : Bool .
  var ID : TaskID .

  op _.getPc : Object ~> TaskID .
  eq (< O : Regs | pc : ID >).getPc = ID .

  op _.setPc`(_`) : Object TaskID ~> Object .
  eq (< O : Regs | >).setPc(ID) = < O : Regs | pc : ID > .

  op _.getMask : Object ~> Bool .
  eq (< O : Regs | mask : B >).getMask = B .

  ops _.setMask _.clearMask : Object ~> Object .
  eq (< O : Regs | >).setMask = < O : Regs | mask : true > .
  eq (< O : Regs | >).clearMask = < O : Regs | mask : false > .

  op _.getIr : Object ~> Bool .
  eq (< O : Regs | ir : B >).getIr = B .

  ops _.setIr _.clearIr : Object ~> Object .
  eq (< O : Regs | >).setIr = < O : Regs | ir : true > .
  eq (< O : Regs | >).clearIr = < O : Regs | ir : false > .

  op _.getTemp : Object ~> TaskID .
  eq (< O : Regs | temp : ID >).getTemp = ID .

  op _.setTemp`(_`) : Object TaskID ~> Object .
  eq (< O : Regs | >).setTemp(ID) = < O : Regs | temp : ID > .
endom)

(omod HARDWARE is
  protecting REGISTER .
  protecting STACK .
  protecting TIME-INF .
  sort Hardware .
  op `[_;_`] : Object Stack ~> Hardware [ctor] .
  mb ([ < O:Oid : Regs | > ; S:Stack ]) : Hardware .

  var REGS : Object .
  var S : Stack .

  *** to signal an interrupt request
  op _.intReq : Hardware -> Hardware .
  eq [ REGS ; S ].intReq = [ (REGS).setIr ; S ] .

  *** to handle an interrupt request
  op _.interrupt : Hardware -> Hardware .
  eq [ REGS ; S ].interrupt = [ (((REGS).setMask).clearIr).setPc(scheduling) ;
                                (push (REGS).getPc to S) ] .

  *** return from the interrupt handler
  op _.intRet : Hardware -> Hardware .
  eq [ REGS ; S ].intRet = [ ((REGS).setPc(peek(S))).clearMask ; pop(S) ] .

  *** to check whether there comes an interrupt request
  op _.existInt : Hardware -> Bool .
  eq [ REGS ; S ].existInt = (not (REGS).getMask) and (REGS).getIr .

  *** to get the pc from registers
  op _.getPc : Hardware -> TaskID .
  eq [ REGS ; S ].getPc = (REGS).getPc .

  *** to set the pc
  op _.setPc`(_`) : Hardware TaskID -> Hardware .
  eq [ REGS ; S ].setPc(ID:TaskID) = [ (REGS).setPc(ID:TaskID) ; S ] .

  *** to get the temp from registers
  op _.getTemp : Hardware -> TaskID .
  eq [ REGS ; S ].getTemp = (REGS).getTemp .

  *** to set the temp
  op _.setTemp`(_`) : Hardware TaskID -> Hardware .
  eq [ REGS ; S ].setTemp(ID:TaskID) = [ (REGS).setTemp(ID:TaskID) ; S ] .

  *** turn on the interrupt switch
  op _.intOn : Hardware -> Hardware .
  eq [ REGS ; S ].intOn = [ (REGS).clearMask ; S ] .

  *** turn on the interrupt switch
  op _.intOff : Hardware -> Hardware .
  eq [ REGS ; S ].intOff = [ (REGS).setMask ; S ] .

  *** mte
  op mteOf : Hardware -> TimeInf .
  eq mteOf(HW:Hardware) = if (HW:Hardware).existInt then zero
                          else INF fi . 
  
endom)

(tomod SYSTEM is
  protecting TASKLIST .
  protecting TIMER .
  protecting SYSTEM-TASKS .
  protecting HARDWARE .
  protecting INTERRUPT-SOURCE .
  protecting LTIME-INF .

  op _____ : TaskList Timer SysTasks Hardware Object -> System [ctor] .

  var SYSTEM : System .
  var L : TaskList .
  var T : Timer .
  var SYS : SysTasks .
  var HW : Hardware .
  var ISRC : Object .
  var ID : TaskID .
  vars M N : Nat .
  var R : Time .
  
  op _.existInt : System ~> Bool .
  eq (L T SYS HW ISRC).existInt = (HW).existInt .

  op _.interrupt : System ~> System .
  eq (L T SYS HW ISRC).interrupt = (L T SYS (HW).interrupt ISRC) .

  op _.stScheduling : System ~> System .
  eq (L T SYS HW ISRC).stScheduling
       = ((updateStatus L with T) inc(T) SYS HW ISRC) .

  op _.running : System ~> TaskID .
  eq (L T SYS HW ISRC).running = (HW).getPc .

  op _mayFinish?in_ : TaskID System ~> Bool .
  ceq ID mayFinish?in (L T SYS HW ISRC) = n:Nat mayFinish?in L
      if some n:Nat := ID .
  eq ID mayFinish?in (L T SYS HW ISRC) = ID mayFinish?in SYS [owise] .

  op _.run1stTask : System ~> System .
  ceq (L T SYS HW ISRC).run1stTask =
        if statusOf N in L == READY
	then ((start N in L) T SYS ((HW).intOn).setPc(some N) ISRC)
        *** else status of n is INTERRUPT
        else (L T SYS (HW).intRet ISRC)
	fi
      if some N := nextTaskIn L from 0 .
  eq (L T SYS HW ISRC).run1stTask = (L T SYS (HW).intRet ISRC) [owise] .

  op _.finScheduling : System ~> System .
  eq (L T SYS HW ISRC).finScheduling
       = (L T (finish scheduling in SYS) HW ISRC).run1stTask .

  op _.stSwitching : System ~> System .
  ceq (L T SYS HW ISRC).stSwitching
        = ((finish N:Nat in L) T SYS
	   (((HW).intOff).setPc(switching)).setTemp(some N:Nat) ISRC)
      if some N:Nat := (HW).getPc .

  op _.runNextTask : System ~> System .
  ceq (L T SYS HW ISRC).runNextTask =
        if statusOf N in L == READY
	then ((start N in L) T SYS ((HW).intOn).setPc(some N) ISRC)
        *** else status of n is INTERRUPT
        else (L T SYS (HW).intRet ISRC)
	fi
      if some M := (HW).getTemp 
         /\ some N := nextTaskIn L from (s M) .
  eq (L T SYS HW ISRC).runNextTask = (L T SYS (HW).intRet ISRC) [owise] .

  op _.finSwitching : System ~> System .
  eq (L T SYS HW ISRC).finSwitching
       = (L T (finish switching in SYS) HW ISRC).runNextTask .  
  

  *********************
  *** instanous rules
  *********************

  rl [req-interrupt] :
    (L T SYS HW ISRC)
    => (L T SYS (HW).intReq (< switching : IntSrc | val : INF >)) .

  crl [handle-interrupt] :
    SYSTEM => ((SYSTEM).interrupt).stScheduling
    if (SYSTEM).existInt .

  crl [scheduling-finish] :
    SYSTEM => (SYSTEM).finScheduling
    if (SYSTEM).running == scheduling
       /\ scheduling mayFinish?in SYSTEM .

  crl [task-finish] :
    SYSTEM => (SYSTEM).stSwitching
    if some N:Nat := (SYSTEM).running
       /\ some N:Nat mayFinish?in SYSTEM .

  crl [switching-finish] :
    SYSTEM => (SYSTEM).finSwitching
    if (SYSTEM).running == switching
       /\ switching mayFinish?in SYSTEM .

  *********************
  *** max time elapsed
  *********************
  op mte : System ~> TimeInf [frozen (1)] .
  ceq mte(L T SYS HW ISRC)
        = minimum( (mteOf (HW).getPc in L) ,
	           minimum( mteOf(HW) , mteOf(ISRC) ) )
      if (HW).getPc :: MaybeNat .
  ceq mte(L T SYS HW ISRC)
        = minimum( (mteOf (HW).getPc in SYS) ,
	           minimum( mteOf(HW) , mteOf(ISRC) ) )
      if (HW).getPc :: Oid .

  *********************
  *** tick rules
  *********************
  crl [tick] :
    {SYSTEM} => {delta(SYSTEM, R)} in time R
    if R le mte(SYSTEM) [nonexec] .

  *********************
  *** time effects
  ********************* 
  op delta : System Time ~> System [frozen (1)] .
  ceq delta((L T SYS HW ISRC) , R)
        = ((delta (HW).getPc L in R) T SYS HW (delta ISRC in R))
      if (HW).getPc :: MaybeNat .
  ceq delta((L T SYS HW ISRC) , R)
        = (L T (delta (HW).getPc SYS in R) HW (delta ISRC in R))
      if (HW).getPc :: Oid .
  
endtom)

(tomod TEST is 
  protecting NAT-TIME-DOMAIN .
  including INTERRUPT-SOURCE .
  including PERIODIC-TASK .
  including SYSTEM .
  protecting QID .

  subsort Qid < Oid .

  ops o1 o2 : -> Object .
  ops regs isrc : -> Object .

  eq regs = < 'r : Regs | pc : some 1 , mask : true ,
               ir : true , temp : none > .
  eq isrc = < 'i : IntSrc | val : 4 , cycle : 500 > .

  eq o1 = < 'o1 : PTask | cnt : [ 1 / [2 , 4]] , period : 2 ,
                          priority : 1 , status : READY > .

  eq o2 = < scheduling : PTask | cnt : [ 3 / [2 , 4]] , period : 1 ,
                          priority : 1 , status : READY > .

  ops L-1 L-2 : -> TaskList .

  eq L-1 = error 
           :: < 'o1 : PTask | priority : 5 , period : 16 ,
	                      status : RUNNING , cnt : [ 3 / [ 3 , 5 ] ] >
           :: < 'o2 : PTask | priority : 4 , period : 8 ,
                              status : INTERRUPT , cnt : [ 2 / [ 3 , 5 ] ] > 
           :: < 'o3 : PTask | priority : 3 , period : 4 ,
                              status : READY , cnt : [ 4 / [ 3 , 5] ] >
           :: < 'o4 : PTask | priority : 2 , period : 2 ,
                              status : DORMANT , cnt : [ 1 / [ 3 , 5 ] ] > 
           :: null .

  eq L-2 = < 'o1 : PTask | priority : 5 , period : 16 ,
	                   status : RUNNING , cnt : [ 3 / [ 3 , 5 ] ] >
           :: < 'o2 : PTask | priority : 4 , period : 8 ,
                              status : INTERRUPT , cnt : [ 2 / [ 3 , 5 ] ] > 
           :: < 'o3 : PTask | priority : 3 , period : 4 ,
                              status : READY , cnt : [ 4 / [ 3 , 5] ] >
           :: < 'o4 : PTask | priority : 2 , period : 2 ,
                              status : DORMANT , cnt : [ 1 / [ 3 , 5 ] ] > 
           :: null .
	   
***(
  eq EXAM-2 = < priority 5 , period 20 , RUNNING : [ 4 / [ 3 , 5 ] ] > 
              :: < priority 4 , period 15 , INTERRUPT : [ 5 / [ 3 , 5 ] ] > 
              :: < priority 3 , period 10 , READY : [ 2 / [ 3 , 5 ] ] >
              :: < priority 2 , period 5 , DORMANT : [ 2 / [ 3 , 5 ] ] > 
              :: null .

  ops SYS-1 SYS-2 : -> System .

  eq SYS-1 = { EXAM-2 ; 1 # bottom ; running some 1  : [ 1 / 2] : clock( 4 / 5 ) 
               | INT-ON : intReq false | [ 0 / [ 1 , 2 ] ] , [ 3 / [ 3 , 4 ] ] ; 
               some 0 } .
  eq SYS-2 = { EXAM-2 ; 1 # bottom ; running some 0 : [ 1 / 2] : clock( 3 / 5 ) 
               | INT-OFF : intReq true | [ 0 / [ 1 , 2 ] ] , [ 0 / [ 3 , 4 ] ] ; 
               none } .
)

  ops l1 l2 l3 l4 : -> TaskList .
  ops init1 init2 init3 init4 : -> System .
  ops l614-1 l614-2 l614-3 l614-4 : -> TaskList .
  ops init-614-1 init-614-2 init-614-3 init-614-4 : -> GlobalSystem .
  ops sys1 sys2 : -> SysTasks .
  ops l5 l6 : -> TaskList .
  ops init5 init6 : -> GlobalSystem .

  *** utilization = 71.6%
  eq l1 = < 't1 : PTask | priority : 8 , period : 2 ,
                          status : DORMANT , cnt : [ 0 / [ 100 , 100 ] ] >
          :: < 't2 : PTask | priority : 7 , period : 4 ,
	                     status : DORMANT , cnt : [ 0 / [ 300 , 300 ] ] >
          :: < 't3 : PTask | priority : 6 , period : 7 ,
	                     status : DORMANT , cnt : [ 0 / [ 300 , 300 ] ] >
          :: < 't4 : PTask | priority : 5 , period : 11 ,
	                     status : DORMANT , cnt : [ 0 / [ 400 , 400 ] ] >
          :: < 't5 : PTask | priority : 4 , period : 14 ,
	                     status : DORMANT , cnt : [ 0 / [ 500 , 500 ] ] >
          :: < 't6 : PTask | priority : 3 , period : 18 ,
	                     status : DORMANT , cnt : [ 0 / [ 800 , 800 ] ] >
          :: < 't7 : PTask | priority : 2 , period : 22 ,
	                     status : DORMANT , cnt : [ 0 / [ 700 , 700 ] ] >
          :: < 't8 : PTask | priority : 1 , period : 24 ,
	                     status : DORMANT , cnt : [ 0 / [ 1000 , 1000 ] ] >
          :: null .

  eq l2 = < 't1 : PTask | priority : 8 , period : 2 ,
                          status : DORMANT , cnt : [ 0 / [ 100 , 100 ] ] >
          :: < 't2 : PTask | priority : 7 , period : 4 ,
	                     status : DORMANT , cnt : [ 0 / [ 300 , 300 ] ] >
          :: < 't3 : PTask | priority : 6 , period : 7 ,
	                     status : DORMANT , cnt : [ 0 / [ 300 , 300 ] ] >
          :: < 't4 : PTask | priority : 5 , period : 11 ,
	                     status : DORMANT , cnt : [ 0 / [ 400 , 400 ] ] >
          :: < 't5 : PTask | priority : 4 , period : 14 ,
	                     status : DORMANT , cnt : [ 0 / [ 500 , 500 ] ] >
          :: < 't6 : PTask | priority : 3 , period : 18 ,
	                     status : DORMANT , cnt : [ 0 / [ 800 , 800 ] ] >
          :: < 't7 : PTask | priority : 2 , period : 22 ,
	                     status : DORMANT , cnt : [ 0 / [ 700 , 700 ] ] >
          :: < 't8 : PTask | priority : 1 , period : 24 ,
	                     status : DORMANT , cnt : [ 0 / [ 6000 , 6000 ] ] >
          :: null .

  eq l3 = < 't1 : PTask | priority : 8 , period : 2 ,
                          status : DORMANT , cnt : [ 0 / [ 50 , 100 ] ] >
          :: < 't2 : PTask | priority : 7 , period : 4 ,
	                     status : DORMANT , cnt : [ 0 / [ 200 , 250 ] ] >
          :: < 't3 : PTask | priority : 6 , period : 7 ,
	                     status : DORMANT , cnt : [ 0 / [ 200 , 300 ] ] >
          :: < 't4 : PTask | priority : 5 , period : 11 ,
	                     status : DORMANT , cnt : [ 0 / [ 300 , 400 ] ] >
          :: < 't5 : PTask | priority : 4 , period : 14 ,
	                     status : DORMANT , cnt : [ 0 / [ 200 , 400 ] ] >
          :: < 't6 : PTask | priority : 3 , period : 18 ,
	                     status : DORMANT , cnt : [ 0 / [ 500 , 700 ] ] >
          :: < 't7 : PTask | priority : 2 , period : 22 ,
	                     status : DORMANT , cnt : [ 0 / [ 400 , 600 ] ] >
          :: < 't8 : PTask | priority : 1 , period : 24 ,
	                     status : DORMANT , cnt : [ 0 / [ 600 , 750 ] ] >
          :: null .

  eq l4 = < 't1 : PTask | priority : 8 , period : 2 ,
                          status : DORMANT , cnt : [ 0 / [ 50 , 100 ] ] >
          :: < 't2 : PTask | priority : 7 , period : 4 ,
	                     status : DORMANT , cnt : [ 0 / [ 200 , 250 ] ] >
          :: < 't3 : PTask | priority : 6 , period : 7 ,
	                     status : DORMANT , cnt : [ 0 / [ 200 , 300 ] ] >
          :: < 't4 : PTask | priority : 5 , period : 11 ,
	                     status : DORMANT , cnt : [ 0 / [ 300 , 400 ] ] >
          :: < 't5 : PTask | priority : 4 , period : 14 ,
	                     status : DORMANT , cnt : [ 0 / [ 200 , 400 ] ] >
          :: < 't6 : PTask | priority : 3 , period : 18 ,
	                     status : DORMANT , cnt : [ 0 / [ 500 , 700 ] ] >
          :: < 't7 : PTask | priority : 2 , period : 22 ,
	                     status : DORMANT , cnt : [ 0 / [ 400 , 600 ] ] >
          :: < 't8 : PTask | priority : 1 , period : 24 ,
	                     status : DORMANT , cnt : [ 0 / [ 600 , 6000 ] ] >
          :: null .

***(
  eq TEST-5 = < priority 1 , period 1 , DORMANT : [ 0 / [ 1 , 6 ] ] >
            :: null .

  eq TEST-6 = < priority 2 , period 1 , DORMANT : [ 0 / [ 1 , 3 ] ] >
              :: < priority 1 , period 2 , DORMANT : [ 0 / [ 2 , 5 ] ] >
              :: null .
)

  eq l614-1 = < 't1 : PTask | priority : 2 , period : 1 ,
                              status : DORMANT , cnt : [ 0 / [ 3000 , 3000 ] ] >
              :: < 't2 : PTask | priority : 1 , period : 5 ,
                                 status : DORMANT , cnt : [ 0 / [ 7000 , 7000 ] ] >
              :: null .

  eq l614-2 = < 't1 : PTask | priority : 2 , period : 1 ,
                              status : DORMANT , cnt : [ 0 / [ 2000 , 2000 ] ] >
              :: < 't2 : PTask | priority : 1 , period : 5 ,
                                 status : DORMANT , cnt : [ 0 / [ 4000 , 4000 ] ] >
              :: null .

  eq l614-3 = < 't1 : PTask | priority : 2 , period : 1 ,
                              status : DORMANT , cnt : [ 0 / [ 2000 , 2000 ] ] >
              :: < 't2 : PTask | priority : 1 , period : 5 ,
	                         status : DORMANT , cnt : [ 0 / [ 2300 , 2300 ] ] >
              :: null .

  eq l614-4 = < 't1 : PTask | priority : 2 , period : 1 ,
                              status : DORMANT , cnt : [ 0 / [ 2500 , 3000 ] ] >
              :: < 't2 : PTask | priority : 1 , period : 5 ,
	                         status : DORMANT , cnt : [ 0 / [ 7000 , 7000 ] ] >
              :: null .

  eq sys1 = [ < scheduling : Task | cnt : [ 0 / [ 5 , 9 ] ] >
              < switching : Task | cnt : [ 0 / [ 2 , 4 ] ] > ] .

  eq sys2 = [ < scheduling : Task | cnt : [ 0 / [ 0 , 0 ] ] >
              < switching : Task | cnt : [ 0 / [ 0 , 0 ] ] > ] .

  op defaultHW : -> Hardware .
  eq defaultHW = [ < 'r : Regs | pc : none , mask : false ,
                                 ir : false , temp : none >
		   ; bottom ] .

  ops isrc1 isrc2 : -> Object .
  eq isrc1 = < 'i : IntSrc | val : 0 , cycle : 500 > .
  eq isrc2 = < 'i : IntSrc | val : 0 , cycle : 5000 > .

  eq init1 = ( l1 [ 0 / 5544 ] sys2 defaultHW isrc1 ) .

  eq init2 = ( l2 [ 0 / 5544 ] sys2 defaultHW isrc1 ) .

  eq init3 = ( l3 [ 0 / 5544 ] sys1 defaultHW isrc1 ) .

  eq init4 = ( l4 [ 0 / 5544 ] sys1 defaultHW isrc1 ) .
               
  eq init-614-1 = { l614-1 [ 0 / 5 ] sys2 defaultHW isrc2 } .
  eq init-614-2 = { l614-2 [ 0 / 5 ] sys2 defaultHW isrc2 } .
  eq init-614-3 = { l614-3 [ 0 / 5 ] sys2 defaultHW isrc2 } .
  eq init-614-4 = { l614-4 [ 0 / 5 ] sys1 defaultHW isrc2 } .

endtom)

(fmod MAYBE-NAT is
  protecting NAT .
  
  sort MaybeNat .
  op none : -> MaybeNat [ctor] .
  op some_ : Nat -> MaybeNat [ctor] .

  vars N M : Nat .

  op s_ : MaybeNat -> MaybeNat .
  eq s none = none .
  eq s some N = some (s N) .

  op _+_ : Nat MaybeNat -> MaybeNat .
  eq N + none = none .
  eq N + some M = some (N + M) .
endfm)

(fmod STACK is 
  protecting MAYBE-NAT .

  sort Stack .
  op bottom : -> Stack [ctor] .
  op _#_ : Nat Stack -> Stack [ctor] .

  var N : Nat .
  var S : Stack .

  op push_to_ : MaybeNat Stack -> Stack .
  eq push none to S = S .
  eq push some N to S = N # S .

  op pop : Stack -> Stack .
  eq pop(bottom) = bottom .
  eq pop(N # S) = S .

  op peek : Stack -> MaybeNat .
  eq peek(bottom) = none .
  eq peek(N # S) = some N .

  op depth : Stack -> Nat .
  eq depth(bottom) = 0 .
  eq depth(N # S) = s (depth(S)) .
endfm)

(tmod COUNTER is
  protecting NAT .
  
  sorts Interval Counter .
  op `[_`,_`] : Time Time -> Interval [ctor] .
  op `[_/_`] : Time Interval -> Counter [ctor] .

  var I : Interval .
  var R R' R'' : Time .

  *** reset the counter
  op reset : Counter -> Counter .
  eq reset([ R / I ]) = [ zero / I ] .

  *** counter may reach the finishing time ?
  op _mayFinish? : Counter -> Bool .
  eq [ R / [ R' , R'' ] ] mayFinish? 
       = if R lt R' then false else true fi .

  op mteOf : Counter -> Time .
  eq mteOf([ R / [ R' , R'' ]]) = R'' monus R .

  op delta_in_ : Counter Time -> Counter .
  eq delta [ R / I ] in R'' = [ R plus R'' / I ] .
endtm)

(fmod TIMER is
  protecting NAT .
  
  sort Timer .
  op `[_/_`] : Nat NzNat -> Timer [ctor] .

  var M : Nat .
  var N : NzNat .

  *** increase the timer
  op inc : Timer -> Timer .
  ceq inc([ M / N ]) = [ 0 / N ] if s M := N .
  eq inc([ M / N ]) = [ s M / N ] [owise] .

  op _rem_ : Timer NzNat -> Nat .
  eq [ M / N ] rem (T:NzNat) = M rem (T:NzNat) .
endfm)

(tomod INTERRUPT-SOURCE is
  protecting NAT .

  *** the source of interrupts
  class IntSrc | val : Time , cycle : Time .

  var O : Oid .
  var R R' R'' : Time .

  op _.timeout : Object ~> Bool .
  eq (< O : IntSrc | val : R , cycle : R' >).timeout = (R == zero) .

  op reset : Object ~> Object .
  eq reset(< O : IntSrc | val : R , cycle : R' >) 
       = < O : IntSrc | val : R' , cycle : R' > .
  
  op mteOf : Object ~> Time .
  eq mteOf(< O : IntSrc | val : R , cycle : R' >) = R .

  op delta_in_ : Object Time ~> Object [frozen (1)] .
  eq delta < O : IntSrc | val : R , cycle : R' > in R''
       = < O : IntSrc | val : R monus R'' , cycle : R' > .
endtom)

(tomod TASK is
  protecting COUNTER .
  class Task | cnt : Counter .

  *** an error status for tasks 
  op error : -> Object [ctor] .
  
  var O : Oid .
  var C : Counter .
  var R : Time .
  
  op _mayFinish? : Object ~> Bool .
  eq < O : Task | cnt : C > mayFinish? = C mayFinish? .

  op mteOf : Object ~> Time .
  eq mteOf(error) = zero .
  eq mteOf(< O : Task | cnt : C >) = mteOf(C) .

  op delta_in_ : Object Time ~> Object [frozen (1)] .
  eq delta error in R = error .
  eq delta < O : Task | cnt : C > in R = < O : Task | cnt : (delta C in R) > .
endtom)

(omod PERIODIC-TASK is
  protecting TASK .
  protecting TIMER .
  sort Status .
  ops RUNNING INTERRUPT READY DORMANT : -> Status [ctor] .

  class PTask | priority : Nat , period : NzNat , status : Status .
  subclass PTask < Task .

  var O : Oid .
  var T : Nat . 
  var ST : Status .
  var C : Counter .
  var TIMER : Timer .

  op updateStatus_with_ : Object Timer ~> Object .
  ceq updateStatus < O : PTask | period : T , status : ST > with TIMER
        = if ST == DORMANT then < O : PTask | status : READY >
          else error fi
      if TIMER rem T == 0 .
  eq updateStatus < O : PTask | status : ST > with TIMER
       = if ST == RUNNING then < O : PTask | status : INTERRUPT >
         else < O : PTask | > fi [owise] .
  eq updateStatus error with TIMER = error .

  op start_ : Object ~> Object .
  eq start error = error .
  eq start < O : PTask | > = < O : PTask | status : RUNNING > .

  op finish_ : Object ~> Object .
  eq finish error = error .
  eq finish < O : PTask | cnt : C >
       = < O : PTask | status : DORMANT , cnt : reset(C) > .
endom)

(omod TASKLIST is
  protecting MAYBE-NAT .
  protecting PERIODIC-TASK .
  protecting TIME-INF .
  sort TaskList .

  *** List of periodic tasks
  op null : -> TaskList [ctor] .
  op _::_ : Object TaskList ~> TaskList [ctor] .
  mb (< O:Oid : PTask | > :: L:TaskList) : TaskList .
  mb (error :: L:TaskList) : TaskList .

  var N : Nat .
  var T : Object .
  var O : Oid .
  var ST : Status .
  var L : TaskList .
  var TIMER : Timer .
  var R : Time .

  *** the model of function updateStatus() in the code
  op updateStatus_with_ : TaskList Timer -> TaskList .
  eq updateStatus null with TIMER = null .
  eq updateStatus T :: L with TIMER
       = (updateStatus T with TIMER) :: (updateStatus L with TIMER) .

  *** find the next task which should be run, from index N
  op nextTaskIn_from_ : TaskList Nat -> MaybeNat .
  eq nextTaskIn null from N = none .
  eq nextTaskIn T :: L from s N = s (nextTaskIn L from N) .
  eq nextTaskIn < O : PTask | status : ST > :: L from 0 
       = if ST == READY or ST == INTERRUPT 
         then some 0
         else s (nextTaskIn L from 0)
         fi .
  eq nextTaskIn error :: L from 0 = none .

  *** get the status of nth task in L
  op statusOf_in_ : Nat TaskList ~> Status .
  eq statusOf 0 in < O : PTask | status : ST > :: L = ST .
  eq statusOf s N in T :: L = statusOf N in L .

  *** start Nth task in L
  op start_in_ : Nat TaskList ~> TaskList .
  --- eq start N in null = null .
  eq start (s N) in (T :: L) = T :: (start N in L) .
  eq start 0 in (T :: L) = (start T) :: L .

  *** ask whether Nth task in L may finish
  op _mayFinish?in_ : Nat TaskList ~> Bool .
  --- eq N mayFinish?in null = false .
  eq (s N) mayFinish?in (T :: L) = N mayFinish?in L .
  eq 0 mayFinish?in (T :: L) = T mayFinish? .

  *** finish Nth task in L
  op finish_in_ : Nat TaskList ~> TaskList .
  --- eq finish N in null = null .
  eq finish (s N) in (T :: L) = T :: (finish N in L) .
  eq finish 0 in (T :: L) = (finish T) :: L .

  *** L contains error?
  op containError : TaskList -> Bool .
  eq containError(null) = false .
  eq containError(error :: L) = true .
  eq containError(T :: L) = containError(L) [owise] .

  *** judge whether N is the should-be-run one (assuming no error)
  op _shouldRunIn_ : MaybeNat TaskList ~> Bool .
  eq none shouldRunIn null = true .
  eq none shouldRunIn < O : PTask | status : DORMANT > :: L
       = none shouldRunIn L .
  eq none shouldRunIn T :: L = false [owise] .
  eq some N shouldRunIn null = false .
  eq some 0 shouldRunIn < O : PTask | status : DORMANT > :: L
       = false .
  eq some 0 shouldRunIn T :: L = true [owise] .
  eq some (s N) shouldRunIn < O : PTask | status : DORMANT > :: L
       = some N shouldRunIn L .
  eq some (s N) shouldRunIn T :: L = false [owise] .

  *** mte of the list L
  op mteOf_in_ : MaybeNat TaskList ~> TimeInf .
  --- eq mteOf N in null = zero .
  eq mteOf none in L = INF .
  eq mteOf some 0 in T :: L = mteOf(T) .
  eq mteOf some (s N) in T :: L = mteOf some N in L .

  *** time effect on list L
  op delta__in_ : MaybeNat TaskList Time ~> TaskList .
  eq delta none L in R = L .
  --- eq delta( N , null , R ) = null .
  eq delta (some 0) (T :: L) in R = (delta T in R) :: L .
  eq delta (some (s N)) (T :: L) in R = T :: (delta (some N) L in R) .
endom)

(omod SYSTEM-TASKS is
  protecting TASK .
  protecting MAYBE-NAT .
  sort SysTasks .
  op `[_`] : ObjectConfiguration -> SysTasks [ctor] .

  sort TaskID .
  subsorts MaybeNat Oid < TaskID .

  ops scheduling switching : -> Oid [ctor] .

  var O : Oid .
  var C : Counter .
  var REST : Configuration .
  
  *** ask whether task with ID may finish
  op _mayFinish?in_ : Oid SysTasks ~> Bool .
  eq O mayFinish?in [ < O : Task | cnt : C > REST ] = C mayFinish? .

  *** finish the task with ID
  op finish_in_ : Oid SysTasks ~> SysTasks .
  eq finish O in [ < O : Task | cnt : C > REST ]
       = [ < O : Task | cnt : reset(C) > REST ] .

  *** mte
  op mteOf_in_ : Oid SysTasks ~> Time .
  eq mteOf O in [ < O : Task | cnt : C > REST ] = mteOf(C) .

  *** delta
  op delta__in_ : Oid SysTasks Time ~> SysTasks .
  eq delta O ([ < O : Task | > REST ]) in R:Time
       = [ (delta (< O : Task | >) in R:Time) REST ] .

endom)

(omod REGISTER is
  protecting SYSTEM-TASKS .
  class Regs | pc : TaskID , mask : Bool ,
               ir : Bool , temp : TaskID .

  var O : Oid .
  var B : Bool .
  var ID : TaskID .

  op _.getPc : Object ~> TaskID .
  eq (< O : Regs | pc : ID >).getPc = ID .

  op _.setPc`(_`) : Object TaskID ~> Object .
  eq (< O : Regs | >).setPc(ID) = < O : Regs | pc : ID > .

  op _.getMask : Object ~> Bool .
  eq (< O : Regs | mask : B >).getMask = B .

  ops _.setMask _.clearMask : Object ~> Object .
  eq (< O : Regs | >).setMask = < O : Regs | mask : true > .
  eq (< O : Regs | >).clearMask = < O : Regs | mask : false > .

  op _.getIr : Object ~> Bool .
  eq (< O : Regs | ir : B >).getIr = B .

  ops _.setIr _.clearIr : Object ~> Object .
  eq (< O : Regs | >).setIr = < O : Regs | ir : true > .
  eq (< O : Regs | >).clearIr = < O : Regs | ir : false > .

  op _.getTemp : Object ~> TaskID .
  eq (< O : Regs | temp : ID >).getTemp = ID .

  op _.setTemp`(_`) : Object TaskID ~> Object .
  eq (< O : Regs | >).setTemp(ID) = < O : Regs | temp : ID > .
endom)

(omod HARDWARE is
  protecting REGISTER .
  protecting STACK .
  protecting TIME-INF .
  sort Hardware .
  op `[_;_`] : Object Stack ~> Hardware [ctor] .
  mb ([ < O:Oid : Regs | > ; S:Stack ]) : Hardware .

  var REGS : Object .
  var S : Stack .

  *** to signal an interrupt request
  op _.intReq : Hardware -> Hardware .
  eq [ REGS ; S ].intReq = [ (REGS).setIr ; S ] .

  *** to handle an interrupt request
  op _.interrupt : Hardware -> Hardware .
  eq [ REGS ; S ].interrupt = [ (((REGS).setMask).clearIr).setPc(scheduling) ;
                                (push (REGS).getPc to S) ] .

  *** return from the interrupt handler
  op _.intRet : Hardware -> Hardware .
  eq [ REGS ; S ].intRet = [ ((REGS).setPc(peek(S))).clearMask ; pop(S) ] .

  *** to check whether there comes an interrupt request
  op _.existInt : Hardware -> Bool .
  eq [ REGS ; S ].existInt = (not (REGS).getMask) and (REGS).getIr .

  *** to get the pc from registers
  op _.getPc : Hardware -> TaskID .
  eq [ REGS ; S ].getPc = (REGS).getPc .

  *** to set the pc
  op _.setPc`(_`) : Hardware TaskID -> Hardware .
  eq [ REGS ; S ].setPc(ID:TaskID) = [ (REGS).setPc(ID:TaskID) ; S ] .

  *** to get the temp from registers
  op _.getTemp : Hardware -> TaskID .
  eq [ REGS ; S ].getTemp = (REGS).getTemp .

  *** to set the temp
  op _.setTemp`(_`) : Hardware TaskID -> Hardware .
  eq [ REGS ; S ].setTemp(ID:TaskID) = [ (REGS).setTemp(ID:TaskID) ; S ] .

  *** turn on the interrupt switch
  op _.intOn : Hardware -> Hardware .
  eq [ REGS ; S ].intOn = [ (REGS).clearMask ; S ] .

  *** turn on the interrupt switch
  op _.intOff : Hardware -> Hardware .
  eq [ REGS ; S ].intOff = [ (REGS).setMask ; S ] .

  *** mte
  op mteOf : Hardware -> TimeInf .
  eq mteOf(HW:Hardware) = if (HW:Hardware).existInt then zero
                          else INF fi . 
  
endom)

(tomod SYSTEM is
  protecting TASKLIST .
  protecting TIMER .
  protecting SYSTEM-TASKS .
  protecting HARDWARE .
  protecting INTERRUPT-SOURCE .
  protecting LTIME-INF .

  var SYSTEM : System .
  var L : TaskList .
  var T : Timer .
  var SYS : SysTasks .
  var HW : Hardware .
  var ISRC : Object .
  var ID : TaskID .
  vars M N : Nat .
  var R : Time .

  op _____ : TaskList Timer SysTasks Hardware Object ~> System [ctor] .
  mb (L T SYS HW < O:Oid : IntSrc | >) : System .

  op _.existInt : System ~> Bool .
  eq (L T SYS HW ISRC).existInt = (HW).existInt .

  op _.interrupt : System ~> System .
  eq (L T SYS HW ISRC).interrupt = (L T SYS (HW).interrupt ISRC) .

  op _.stScheduling : System ~> System .
  eq (L T SYS HW ISRC).stScheduling
       = ((updateStatus L with T) inc(T) SYS HW ISRC) .

  op _.running : System ~> TaskID .
  eq (L T SYS HW ISRC).running = (HW).getPc .

  op _mayFinish?in_ : TaskID System ~> Bool .
  ceq ID mayFinish?in (L T SYS HW ISRC) = n:Nat mayFinish?in L
      if some n:Nat := ID .
  eq ID mayFinish?in (L T SYS HW ISRC) = ID mayFinish?in SYS [owise] .

  op _.run1stTask : System ~> System .
  ceq (L T SYS HW ISRC).run1stTask =
        if statusOf N in L == READY
	then ((start N in L) T SYS ((HW).intOn).setPc(some N) ISRC)
        *** else status of n is INTERRUPT
        else (L T SYS (HW).intRet ISRC)
	fi
      if some N := nextTaskIn L from 0 .
  eq (L T SYS HW ISRC).run1stTask = (L T SYS (HW).intRet ISRC) [owise] .

  op _.finScheduling : System ~> System .
  eq (L T SYS HW ISRC).finScheduling
       = (L T (finish scheduling in SYS) HW ISRC).run1stTask .

  op _.stSwitching : System ~> System .
  ceq (L T SYS HW ISRC).stSwitching
        = ((finish N:Nat in L) T SYS
	   (((HW).intOff).setPc(switching)).setTemp(some N:Nat) ISRC)
      if some N:Nat := (HW).getPc .

  op _.runNextTask : System ~> System .
  ceq (L T SYS HW ISRC).runNextTask =
        if statusOf N in L == READY
	then ((start N in L) T SYS ((HW).intOn).setPc(some N) ISRC)
        *** else status of n is INTERRUPT
        else (L T SYS (HW).intRet ISRC)
	fi
      if some M := (HW).getTemp 
         /\ some N := nextTaskIn L from (s M) .
  eq (L T SYS HW ISRC).runNextTask = (L T SYS (HW).intRet ISRC) [owise] .

  op _.finSwitching : System ~> System .
  eq (L T SYS HW ISRC).finSwitching
       = (L T (finish switching in SYS) HW ISRC).runNextTask .  
  

  *********************
  *** instanous rules
  *********************

  crl [req-interrupt] :
    (L T SYS HW ISRC) => (L T SYS (HW).intReq reset(ISRC)) 
    if (ISRC).timeout .

  crl [handle-interrupt] :
    SYSTEM => ((SYSTEM).interrupt).stScheduling
    if (SYSTEM).existInt .

  crl [scheduling-finish] :
    SYSTEM => (SYSTEM).finScheduling
    if (SYSTEM).running == scheduling
       /\ scheduling mayFinish?in SYSTEM .

  crl [task-finish] :
    SYSTEM => (SYSTEM).stSwitching
    if some N:Nat := (SYSTEM).running
       /\ some N:Nat mayFinish?in SYSTEM .

  crl [switching-finish] :
    SYSTEM => (SYSTEM).finSwitching
    if (SYSTEM).running == switching
       /\ switching mayFinish?in SYSTEM .

  *********************
  *** max time elapsed
  *********************
  op mte : System ~> TimeInf [frozen (1)] .
  ceq mte(L T SYS HW ISRC)
        = minimum( (mteOf (HW).getPc in L) ,
	           minimum( mteOf(HW) , mteOf(ISRC) ) )
      if (HW).getPc :: MaybeNat .
  ceq mte(L T SYS HW ISRC)
        = minimum( (mteOf (HW).getPc in SYS) ,
	           minimum( mteOf(HW) , mteOf(ISRC) ) )
      if (HW).getPc :: Oid .

  *********************
  *** tick rules
  *********************
  crl [tick] :
    {SYSTEM} => {delta(SYSTEM, R)} in time R
    if R le mte(SYSTEM) [nonexec] .

  *********************
  *** time effects
  ********************* 
  op delta : System Time ~> System [frozen (1)] .
  ceq delta((L T SYS HW ISRC) , R)
        = ((delta (HW).getPc L in R) T SYS HW (delta ISRC in R))
      if (HW).getPc :: MaybeNat .
  ceq delta((L T SYS HW ISRC) , R)
        = (L T (delta (HW).getPc SYS in R) HW (delta ISRC in R))
      if (HW).getPc :: Oid .
  
endtom)

(omod RMS-VERIFICATION is
  protecting SYSTEM .

  var L : TaskList .
  var T : Timer .
  var SYS : SysTasks .
  var HW : Hardware .
  var ISRC : Object .

  op taskTimeout : System ~> Bool .
  eq taskTimeout( L T SYS HW ISRC ) = containError(L) .

  op scheduleCorrectly : System ~> Bool .
  eq scheduleCorrectly( L T SYS HW ISRC )
       = if (HW).getPc :: MaybeNat 
         then ((HW).getPc shouldRunIn L)
         else true fi .

***(
  eq scheduleCorrectly( L T SYS HW ISRC )
       = (not containError(L))
         and (if (HW).getPc :: MaybeNat then ((HW).getPc shouldRunIn L)
              else true fi) .
)
endom)

(tomod RMS-MODEL-CHECK is
  including TIMED-MODEL-CHECKER .
  protecting RMS-VERIFICATION .

  ops schedulable scheduleCorrectly : -> Prop [ctor] .
  eq {SYSTEM:System} |= schedulable = (not taskTimeout(SYSTEM:System)) .
  eq {SYSTEM:System} |= scheduleCorrectly = scheduleCorrectly(SYSTEM:System) .
endtom)


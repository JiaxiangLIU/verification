
(fmod TO-STATUS is
    --- system status
    sort SystemStatus .
    ops SYS-INIT SYS-FAULT SYS-MAINTENANCE SYS-LAUNCHED SYS-STANDBY
	SYS-NORMAL SYS-AUTOCONTROL SYS-MAX : -> SystemStatus .

    --- trip status
    sort TripStatus .
    ops TRIP-DATA-RECVING TRIP-DATA-COMPLETE TRIP-MARSHALLING-CONFIRM 
	TRIP-INIT TRIP-START TRIP-PAUSE TRIP-COMPLETE TRIP-ANOMALY 
	TRIP-MAX : -> TripStatus .
    
    --- the sources where the events come
    sort EventSource .
    ops SOURCE-COM SOURCE-CORE SOURCE-CONTROL SOURCE-VOTE
	SOURCE-INPUT SOURCE-OUTPUT MAX-SOURCE : -> EventSource .

    --- events
    sort EventType .

    --- events on COMM
    ops EVENT-COM-HEARTBEAT EVENT-COM-REGISTER EVENT-LKJ-VERSION-DIFFERENCE
	EVENT-TRIP-STATUS-NOTICE EVENT-DUTY-ASSISTING-CHANGE
	EVENT-ROUTE-DATA-SEND EVENT-ROUTE-DATA-CURVE EVENT-ROUTE-DATA-LIMIT
	EVENT-ROUTE-DATA-TELESEME EVENT-ROUTE-DATA-TUNNEL EVENT-ROUTE-DATA-STATION
	EVENT-FRONT-SPEED-LIMIT EVENT-FRONT-BRANCH-TRANSFER EVENT-FRONT-SIDE-LINE-PASS
	EVENT-MARSHALLING-RE-CHANGE EVENT-REAL-TIME-INFO EVENT-ROUTE-VERSION-SEND
	EVENT-TRIP-CHANGE EVENT-MARSHALLING-CHANGE EVENT-CLOCK-SYNC
	EVENT-REAL-TIME-ERROR EVENT-BASE-LINE-DATA-ERROR EVENT-ROUTE-EXTRACT-FAILUER
	EVENT-MARSHALLING-ERROR EVENT-STATION-ERROR EVENT-COM-EXTERNAL-CAN-FAULT
	EVENT-COM-INTERNAL-CAN-FAULT EVENT-COM-MAX : -> EventType .

    --- events on CORE
    ops EVENT-CORE-HEARTBEAT EVENT-CORE-REGISTER EVENT-ROUTE-VERSION-RESULT
	EVENT-TRIP-OPT-COMPLETE EVENT-ROUTE-DATA-SEND-ACK EVENT-ROUTE-DATA-CURVE-ACK
	EVENT-ROUTE-DATA-LIMIT-ACK EVENT-ROUTE-DATA-TELESEME-ACK EVENT-ROUTE-DATA-TUNNEL-ACK
	EVENT-ROUTE-DATA-STATION-ACK EVENT-REAL-TIME-CTRL EVENT-CORE-CAN-FAULT
	EVENT-TRIP-ROUTE-ERROR EVENT-TRIP-POSITION-ERROR EVENT-TRIP-PARA-ERROR
	EVENT-TRIP-OPT-ERROR EVENT-TEMP-OPT-ERROR EVENT-CORE-MAX : -> EventType .

    --- events on Control-Box
    ops EVENT-CTRL-BOX-HEARTBEAT EVENT-CTRL-BOX-REGISTER EVENT-CTRL-BOX-MASTER-SET
	EVENT-CTRL-BOX-MASTER-RELIEVE EVENT-TRIP-INIT-START EVENT-MANNAL-TO-AUTO
	EVENT-AUTO-TO-MANNAL EVENT-TWO-GEAR-TO-MANNUL EVENT-SYS-TO-MAINTENANCE
	EVENT-EXIT-MAINTENANCE EVENT-KEEP-AUTO EVENT-KEEP-MANNAL
	EVENT-SEND-AUTO-GEAR EVENT-GEAR8-AUTO-CONFIRM-ACK EVENT-TRIP-OVER
	EVENT-VOTE-HEARTBEAT-STOP EVENT-CTRL-BOX-CAN-FAULT EVENT-CTRL-BOX-PARSE-ERROR
	EVENT-CTRL-MAX : -> EventType .

    --- events on VOTE
    ops EVENT-VOTE-HEARTBEAT EVENT-BROADCAST-COM-ADDR EVENT-MASTER-VOTE-EXCHANGE
	EVENT-LOCK-SCREEN EVENT-VOTE-TRIP-INIT-START EVENT-SYS-TRIP-STATUS-SEND
	EVENT-MANNAL-GEAR-CHANGE EVENT-TWO-GEAR-CONFIRM EVENT-MANNAL-COMPLETE
	EVENT-AUTO-COMPLETE EVENT-BRANCH-TRANSFER-TIME EVENT-SPEED-LIMIT-TIME
	EVENT-SIG-CHANGE-TIME EVENT-AUTO-TIME-ALARM EVENT-MANNUL-TIME-ALARM
	EVENT-BRAKE-GEAR0 EVENT-GEAR8-AUTO-CONFIRM EVENT-VOTE-UPDATE-MARSHALLING
	EVENT-VOTE-SENT-MARSHALLING EVENT-DISP-AUTO EVENT-DISP-MANNAL
	EVENT-DISP-REAL-TIME-INFO EVENT-VOTE-TRIP-INIT-COMPLETE EVENT-VOTE-BRANCH-TRANSFER-PASS
	EVENT-VOTE-SIDE-LINE-PASS-START EVENT-VOTE-SIDE-LINE-PASS-END EVENT-TRIP-UPDATE
	EVENT-SEND-TRIP-TO-CORE EVENT-MAR-UPDATE EVENT-SEND-MAR-TO-CORE
	EVENT-BOARD-REGISTER-FAILUER EVENT-MASTER-COM-HEARTBEAT-STOP EVENT-ALL-COM-HEARTBEAT-STOP
	EVENTH-CORE-HEARTBEAT-STOP EVENT-MASTER-CTRL-HEARTBEAT-STOP EVENT-RELAY-FAULT
	EVENT-COM-FAULT-HANDLE EVENT-CORE-FAULT-HANDLE EVENT-CTRL-FAULT-HANDLE
	EVENT-VOTE-FAULT-HANDLE EVENT-VOTE-MAX : -> EventType .

    --- events on INPUT
    ops EVENT-DIGITAL-ANALOG EVENT-INPUT-MAX : -> EventType .

    --- events on OUTPUT
    ops EVENT-HEARTBEAT-STOP EVENT-OUTPUT-MAX : -> EventType .    

endfm)

(omod VALUE is
    protecting TO-STATUS .
    sort Value .

    subsort Nat < Value .
    subsort EventSource < Value .
    subsort Oid < Value .
    subsort SystemStatus < Value .
    subsort TripStatus < Value .
    op null : -> Value .
endom)
    
(omod COMMAND is
    protecting TO-STATUS .
    protecting VALUE .
    sort Command .

    op _|_|_ : EventSource EventType Value -> Command [ctor] .

endom)

(omod DATA is
    protecting TO-STATUS .
    protecting VALUE .
    sort Data .

    op _|_|_|_|_ : EventSource EventType Value Nat Nat -> Data [ctor] .

endom)
            
(omod FRAME is
    protecting COMMAND .
    protecting DATA .
    sort Frame .
    sorts DataFrame CommandFrame .
    subsorts DataFrame CommandFrame < Frame .
    
    op command : Command -> CommandFrame [ctor] .
    op data : Data -> DataFrame [ctor] .

    sort MaybeFrame .
    op none : -> MaybeFrame [ctor] .
    op some_ : Frame -> MaybeFrame [ctor] .

endom)
    
(omod SOCKET is
    protecting FRAME .
    sort SocketType .
    subsort Nat < SocketType .

    --- define a msg to send frames to some socket port
    msg `[==>_:_|_`] : Oid SocketType MaybeFrame -> Msg .
endom)

(omod QUEUE is
    protecting FRAME .
    sort Queue .

    pr NAT .
    subsort Nat < Frame .

    op nil : -> Queue [ctor] .
    op _::_ : Frame Queue -> Queue [ctor] .

    vars F F' : Frame .
    var Q : Queue .

    --- operation _peek_ requires the Queue to be not empty
    op peek : Queue -> Frame .
    eq peek(F :: Q) = F .

    op enqueue : Frame Queue -> Queue .
    eq enqueue(F, nil) = F :: nil .
    eq enqueue(F, F' :: Q) = F' :: enqueue(F, Q) .

    op dequeue : Queue -> Queue .
    eq dequeue(nil) = nil .
    eq dequeue(F :: Q) = Q .
endom)

(omod BUFFER is
    protecting QUEUE .
    sort Buffer .
    subsort Queue < Buffer .
endom)

(omod MEMORY is
    protecting QID .
    protecting VALUE .
    sort Memory .
    sorts Variable Pair .
    subsort Qid < Variable .

    op `(_->_`) : Variable Value -> Pair [ctor] .

    op empty : -> Memory [ctor] .
    subsort Pair < Memory .
    op _`,_ : Memory Memory -> Memory [ctor assoc comm id: empty] .

    var X : Variable .
    vars V V' : Value .
    var M : Memory .

    --- assignment
    op _`[_:=_`] : Memory Variable Value -> Memory .
    eq ((X -> V), M)[X := V'] = (X -> V'), M .
    eq M[X := V'] = (X -> V'), M [owise] .

    --- evaluation
    op _`[_`] : Memory Variable -> Value .
    eq ((X -> V), M)[X] = V .
    eq M[X] = null [owise] .

endom)

(omod THREAD is
    sort ThreadID .
    subsort ThreadID < Oid .

    sort Status .
    
    class Thread | st : Status .
endom)

(omod THREADPOOL is
    protecting THREAD .
    sort ThreadPool .

    op empty : -> ThreadPool [ctor] .
    op _;_ : Object ThreadPool -> ThreadPool [ctor] .

    ops a b c : -> Object .

    vars O O' : Object .
    var P : ThreadPool .
    
    --- operation _peek_ requires the Pool to be not empty
    op peek : ThreadPool -> Object .
    eq peek(O ; P) = O .

    op enqueue : Object ThreadPool -> ThreadPool .
    eq enqueue(O, empty) = O ; empty .
    eq enqueue(O, O' ; P) = O' ; enqueue(O, P) .

    op dequeue : ThreadPool -> ThreadPool .
    eq dequeue(empty) = empty .
    eq dequeue(O ; P) = P .
endom)
    
(omod BOARD is
    protecting BUFFER .
    protecting MEMORY .
    protecting THREADPOOL .

    class Board | cpu : Object, mem : Memory, pool : ThreadPool .

    op ideal : -> Object .

    ops CON-DES COM-DES CORE-DES VOTE-DES : -> Oid .

endom)

(omod COMM is
    protecting BOARD .

    class Comm .
    subclass Comm < Board .

endom)

(omod CORE is
    protecting TO-STATUS .
    protecting BOARD .
    protecting SOCKET .

    class Core .
    subclass Core < Board .

    --- threads
    op socket-rcv : Nat -> ThreadID [ctor] .
    ops rt-main main : -> ThreadID [ctor] .
    op command-frame-rcv-handle : -> ThreadID .
    
    op read : -> Status .
    op frame-parse : Frame -> Status .
    op threadpool-add : ThreadID Command -> Status .
    op data-frame-rcv-handle : Data -> Status .
    op done : -> Status .

    
    vars O O' : Oid .
    var N : Nat .
    var M : Memory .
    vars T T' : Object .
    var P : ThreadPool .
    var F : Frame .
    subsort Nat < Oid .
    var OB : Object .
    var C : Command .
    var NEW : Object .
    var CON : Configuration .
    var D : Data .
    var V : Value .
    var SYSST : SystemStatus .
    var TRIPST : TripStatus .
    vars AMOUNT CNT : Nat .
    
    op msg1 : Oid Nat -> Msg .
    op cpu1 : -> Object .
    op mem1 : -> Memory .
    op pool1 : -> ThreadPool .
    op ftest : -> Frame .
    op com1 : -> Command .
    op data1 : -> Data .
    ops a b c : -> Object .

    ops test1 test2 test3 test4 test5 test6 : -> Configuration .
    ops test7 : -> Configuration .
    eq test1 = < 1 : Core | cpu : < socket-rcv(2) : Thread | st : read >,
	mem : mem1, pool : a ; empty >
	[==> 1 : 2 | none ]  .
    eq test2 = < 2 : Core | cpu : < socket-rcv(2) : Thread | st : read >,
	mem : ('master-commu-addr -> SOURCE-COM), pool : empty >
	[==> 2 : 2 | some command( SOURCE-VOTE | EVENT-BROADCAST-COM-ADDR | SOURCE-COM ) ]  .    
    eq test3 = < 3 : Core | cpu : < socket-rcv(2) : Thread | st : read >,
	mem : mem1, pool : empty >
	[==> 3 : 2 | some data(data1) ]  .
    eq test4 = < 4 : Core | cpu : < socket-rcv(2) : Thread | st : read >,
	mem : (('master-commu-addr -> SOURCE-COM), ('sys-status -> SOURCE-COM)), 
	pool : empty >
	[==> 4 : 2 | some command( SOURCE-VOTE | EVENT-MASTER-VOTE-EXCHANGE | SYS-LAUNCHED ) ]  .
    eq test5 = < 5 : Core | cpu : < socket-rcv(2) : Thread | st : read >,
	mem : (('trip-status -> SOURCE-COM), ('sys-status -> SOURCE-COM)), 
	pool : empty >
	[==> 5 : 2 | some command( SOURCE-VOTE | EVENT-SYS-TRIP-STATUS-SEND | TRIP-START ) ]  .
    eq test6 = < 6 : Core | cpu : < socket-rcv(2) : Thread | st : read >,
	mem : (('trip-status -> SOURCE-COM), ('sys-status -> SOURCE-COM)), 
	pool : empty >
	[==> 6 : 2 | some command( SOURCE-COM | EVENT-SYS-TRIP-STATUS-SEND | TRIP-START ) ]  .
    eq test7 = < 7 : Core | cpu : < socket-rcv(2) : Thread | st : read >,
	mem : (('trip-status -> SOURCE-COM), ('sys-status -> SOURCE-COM)), 
	pool : empty >
	[==> 7 : 2 | some data( SOURCE-COM | EVENT-FRONT-SPEED-LIMIT | TRIP-START | 0 | 1 ) ]  .
   

    --- rl [schedule] :
    --- assume this transition is instantaneous
    eq < O : Core | cpu : ideal, pool : (T ; P) > = < O : Core | cpu : T, pool : P > .

    --- wait to read msgs, if existing, then read
    crl [socket-rcv-n-read-some] :
	< O : Core | cpu : T, pool : P >
      	[==> O : N | some F ]
      => < O : Core | cpu : ideal, pool : enqueue(T', P) >
	[==> O : N | none ]
      if < socket-rcv(N) : Thread | st : read > := T
	  /\ T' := < socket-rcv(N) : Thread | st : frame-parse(F) > .

    --- wait to read msgs, if not exisiting, then switch
    crl [socket-rcv-n-read-none] :
	< O : Core | cpu : T, pool : P > [==> O : N | none ]
      => < O : Core | cpu : ideal, pool : enqueue(T, P) > [==> O : N | none ]
      if < socket-rcv(N) : Thread | st : read > := T .

    --- parse command frames
    eq frame-parse(command(C)) = threadpool-add(command-frame-rcv-handle, C) .

    op handle : Command -> Status .

    --- create a new thread in pool to handle commands, then return to while loop reading
    crl [threadpool-add-command] :
	< O : Core | cpu : T, pool : P >
      => < O : Core | cpu : ideal, pool : enqueue(T', enqueue(NEW, P)) >
      if < socket-rcv(N) : Thread | st : threadpool-add(command-frame-rcv-handle, C) > := T
	  /\ T' := < socket-rcv(N) : Thread | st : read >
	  /\ NEW := < command-frame-rcv-handle : Thread | st : handle(C) > . 

    --- parse data frames
    eq frame-parse(data(D)) = data-frame-rcv-handle(D) .

    op limit-data-rcv-handle : Value -> Status .

    --- data_frame_rcv_handle
    eq data-frame-rcv-handle( (SOURCE-COM | EVENT-FRONT-SPEED-LIMIT | V | AMOUNT | CNT) )
      = limit-data-rcv-handle(V) .

    --- behavior of limit_data_rcv_handle( ) in data_frame_rcv_handle
    eq limit-data-rcv-handle(V) = done .

    --- definition of "done" status of the thread socekt_rcv():
    --- back to loop reading
    eq < socket-rcv(N) : Thread | st : done >
      = < socket-rcv(N) : Thread | st : read > .
    
    --- handle the Data frame, do something, then return to while loop reading *** TODO
***(    crl [data-frame-rcv-handle] :
	< O : Core | cpu : T, pool : P >
      => < O : Core | cpu : ideal, pool : enqueue(T', P) >
      if < socket-rcv(N) : Thread | st : data-frame-rcv-handle(D) > := T
	  /\ T' := < socket-rcv(N) : Thread | st : read > . )

    op set-commu-addr : Oid -> Status .
    op set-sys-status : SystemStatus -> Status .
    op set-trip-status : TripStatus -> Status .
      
    --- command_frame_rcv_handle
    eq handle( SOURCE-VOTE | EVENT-BROADCAST-COM-ADDR | V )
      = if V == SOURCE-COM then set-commu-addr(COM-DES) 
        else done fi .
    eq handle( SOURCE-VOTE | EVENT-MASTER-VOTE-EXCHANGE | V )
      = set-sys-status(V) .
    eq handle( SOURCE-VOTE | EVENT-SYS-TRIP-STATUS-SEND | V ) 
      = set-trip-status(V) .
    eq handle( S:EventSource | E:EventType | V ) = done [owise] .
    *** DONE for CORE 

    --- behavior of set_commu_addr( ) in command_frame_rcv_handle
    crl [set-commu-addr] :
	< O : Core | cpu : T, mem : M, pool : P >
      => if O' == COM-DES 
	 then < O : Core | cpu : ideal, mem : M['master-commu-addr := O'], pool : enqueue(T', P) >
	 else < O : Core | cpu : ideal, mem : M, pool : enqueue(T', P) > fi
      if < command-frame-rcv-handle : Thread | st : set-commu-addr(O') > := T
	  /\ T' := < command-frame-rcv-handle : Thread | st : done > . 

    --- behavior of set_sys_status( ) in command_frame_rcv_handle
    crl [set-sys-status] :
	< O : Core | cpu : T, mem : M, pool : P >
      => < O : Core | cpu : ideal, mem : M['sys-status := SYSST], pool : enqueue(T', P) >
      if < command-frame-rcv-handle : Thread | st : set-sys-status(SYSST) > := T
	  /\ T' := < command-frame-rcv-handle : Thread | st : done > . 

    --- behavior of set_trip_status( ) in command_frame_rcv_handle
    crl [set-trip-status] :
	< O : Core | cpu : T, mem : M, pool : P >
      => < O : Core | cpu : ideal, mem : M['trip-status := TRIPST], pool : enqueue(T', P) >
      if < command-frame-rcv-handle : Thread | st : set-trip-status(TRIPST) > := T
	  /\ T' := < command-frame-rcv-handle : Thread | st : done > . 

    --- thread command_frame_rcv_handle done
    crl [command-frame-rcv-handle-done] :
	< O : Core | cpu : T > => < O : Core | cpu : ideal >
      if < command-frame-rcv-handle : Thread | st : done > := T .

endom)

(omod VOTE is
    protecting BOARD .

    class Vote .
    subclass Vote < Board .

endom)

        
(omod LKJ is
    protecting DATA .
    class LKJ | data : Data .
endom)

(omod CTRL-BOX is
    protecting DATA .
    class CtrlBox | data : Data .
endom)
    
(omod SYSTEM is
    protecting SOCKET .
    protecting COMM .
    protecting CORE .
    protecting VOTE .
    protecting LKJ .
    protecting CTRL-BOX .
    pr QUEUE .
    pr THREADPOOL .

    op mem : -> Memory .
    op pool : -> ThreadPool .




    --- j  
***(    ceq < O:Oid : Board | cpu : C:Object, mem : M:Memory, pool : P:ThreadPool >
      = < O:Oid : Board | cpu : ideal, mem : mem, pool : pool >
      if C:Object =/= ideal /\ M:Memory =/= mem /\ P:ThreadPool =/= pool . )
    
    
    
        
endom)
    